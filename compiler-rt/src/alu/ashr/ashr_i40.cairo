use crate::alu::ashr::ashr;
use crate::integer::u40::u40;

pub fn __llvm_ashr_n_n_n(n: u128, shift: u128) -> u128 {
    ashr::<u40>(n, shift)
}

#[cfg(test)]
mod tests {
    use super::__llvm_ashr_n_n_n;
    use crate::alu::test_case::TestCaseTwoArgs;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseTwoArgs; 122] = [
        // All possible shifts on -1 from 0 throughout the whole input value length.
        // Since -1 is negative, sign extension happens and the output is also -1.
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 0, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 1, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 2, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 3, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 4, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 5, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 6, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 7, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 8, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 9, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 10, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 11, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 12, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 13, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 14, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 15, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 16, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 17, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 18, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 19, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 20, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 21, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 22, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 23, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 24, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 25, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 26, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 27, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 28, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 29, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 30, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 31, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 32, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 33, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 34, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 35, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 36, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 37, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 38, expected: 0b1111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b1111111111111111111111111111111111111111, rhs: 39, expected: 0b1111111111111111111111111111111111111111 },

        // All possible shifts on 40 bits from 0 throughout the whole input value length.
        // Since 2^40/2 - 1 is positive, the output is just right shift by rhs.
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 0, expected: 0b0111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 1, expected: 0b0011111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 2, expected: 0b0001111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 3, expected: 0b0000111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 4, expected: 0b0000011111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 5, expected: 0b0000001111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 6, expected: 0b0000000111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 7, expected: 0b0000000011111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 8, expected: 0b0000000001111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 9, expected: 0b0000000000111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 10, expected: 0b0000000000011111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 11, expected: 0b0000000000001111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 12, expected: 0b0000000000000111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 13, expected: 0b0000000000000011111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 14, expected: 0b0000000000000001111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 15, expected: 0b0000000000000000111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 16, expected: 0b0000000000000000011111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 17, expected: 0b0000000000000000001111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 18, expected: 0b0000000000000000000111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 19, expected: 0b0000000000000000000011111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 20, expected: 0b0000000000000000000001111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 21, expected: 0b0000000000000000000000111111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 22, expected: 0b0000000000000000000000011111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 23, expected: 0b0000000000000000000000001111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 24, expected: 0b0000000000000000000000000111111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 25, expected: 0b0000000000000000000000000011111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 26, expected: 0b0000000000000000000000000001111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 27, expected: 0b0000000000000000000000000000111111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 28, expected: 0b0000000000000000000000000000011111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 29, expected: 0b0000000000000000000000000000001111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 30, expected: 0b0000000000000000000000000000000111111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 31, expected: 0b0000000000000000000000000000000011111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 32, expected: 0b0000000000000000000000000000000001111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 33, expected: 0b0000000000000000000000000000000000111111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 34, expected: 0b0000000000000000000000000000000000011111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 35, expected: 0b0000000000000000000000000000000000001111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 36, expected: 0b0000000000000000000000000000000000000111 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 37, expected: 0b0000000000000000000000000000000000000011 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 38, expected: 0b0000000000000000000000000000000000000001 },
        TestCaseTwoArgs { lhs: 0b0111111111111111111111111111111111111111, rhs: 39, expected: 0b0000000000000000000000000000000000000000 },

        // The same set of operations but on a zero bit pattern - 0 is positive, so no sign extension happens
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 0, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 1, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 2, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 3, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 4, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 5, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 6, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 7, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 8, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 9, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 10, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 11, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 12, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 13, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 14, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 15, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 16, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 17, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 18, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 19, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 20, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 21, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 22, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 23, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 24, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 25, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 26, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 27, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 28, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 29, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 30, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 31, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 32, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 33, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 34, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 35, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 36, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 37, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 38, expected: 0b0000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b0000000000000000000000000000000000000000, rhs: 39, expected: 0b0000000000000000000000000000000000000000 },

        // Shift of a mixed 0/1 bit pattern
        TestCaseTwoArgs { lhs: 0b1010101010101010101010101010101010101010, rhs: 4, expected: 0b1111101010101010101010101010101010101010 },
        TestCaseTwoArgs { lhs: 0b0101010101010101010101010101010101010101, rhs: 4, expected: 0b0000010101010101010101010101010101010101 },
    ];

    #[test]
    fn test_i40() {
        for case in test_cases.span() {
            assert_eq!(__llvm_ashr_n_n_n(*case.lhs, *case.rhs), *case.expected);
        }
    }
}
