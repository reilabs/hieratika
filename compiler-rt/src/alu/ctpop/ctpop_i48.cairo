use crate::alu::ctpop::ctpop;
use crate::integer::u48::u48;

pub fn __llvm_ctpop_k_k(value: u128) -> u128 {
    ctpop::<u48>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_ctpop_k_k;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000000001000010010011011110100001101100011110101, expected: 20 },
        TestCaseOneArg { arg: 0b000010010011011110000000110001000000101101001101, expected: 18 },
        TestCaseOneArg { arg: 0b000010111101011000101000111111011010001000001010, expected: 22 },
        TestCaseOneArg { arg: 0b000011000101000001001011101111001010011011010000, expected: 20 },
        TestCaseOneArg { arg: 0b000011000111101110001010111000001110111001101100, expected: 24 },
        TestCaseOneArg { arg: 0b000111101111011111101000010111101010101101011000, expected: 28 },
        TestCaseOneArg { arg: 0b000111111000111001001001000001010110010000111001, expected: 21 },
        TestCaseOneArg { arg: 0b000111111101001100111101100111100110110111111100, expected: 31 },
        TestCaseOneArg { arg: 0b001001000000101011010101110100001011101111010110, expected: 23 },
        TestCaseOneArg { arg: 0b001001101000010100010100111010001110100111010100, expected: 21 },
        TestCaseOneArg { arg: 0b001011110111101110010010001100111000101111010010, expected: 26 },
        TestCaseOneArg { arg: 0b001100001100001111000111111001001111111010011000, expected: 25 },
        TestCaseOneArg { arg: 0b001100010110111011110111110111111000011110010000, expected: 28 },
        TestCaseOneArg { arg: 0b001101011111000001001010010101100110100110110101, expected: 24 },
        TestCaseOneArg { arg: 0b001101101101000100000110111001110010110011111110, expected: 26 },
        TestCaseOneArg { arg: 0b001111110001101111110111000101001101100000100111, expected: 27 },
        TestCaseOneArg { arg: 0b001111111100100101110100011111011001101010110100, expected: 28 },
        TestCaseOneArg { arg: 0b010000010111011001000000111010011101001110011111, expected: 24 },
        TestCaseOneArg { arg: 0b010001101101101111001110110001100100000000011111, expected: 24 },
        TestCaseOneArg { arg: 0b010010011001001110111000101011111001011101111100, expected: 27 },
        TestCaseOneArg { arg: 0b010010101101110010010101001000101101111101000001, expected: 23 },
        TestCaseOneArg { arg: 0b010011011101000000100110001010011101010000111100, expected: 21 },
        TestCaseOneArg { arg: 0b010011101000001100011111001111000000101100101100, expected: 22 },
        TestCaseOneArg { arg: 0b010100011010111000010101110110110000110000111111, expected: 25 },
        TestCaseOneArg { arg: 0b010100110100011111111110001001001000110000010110, expected: 23 },
        TestCaseOneArg { arg: 0b010100110110111010001000011111010011010110101101, expected: 26 },
        TestCaseOneArg { arg: 0b010101111111101101100111001100101111001100011000, expected: 28 },
        TestCaseOneArg { arg: 0b010110001001110101101111000110010100010111110001, expected: 25 },
        TestCaseOneArg { arg: 0b010110110000110110010011110110100011001100100100, expected: 23 },
        TestCaseOneArg { arg: 0b011001100010110101111110111000100010100001100101, expected: 24 },
        TestCaseOneArg { arg: 0b011010000010001110001110101010101111001010010111, expected: 24 },
        TestCaseOneArg { arg: 0b011101100100000000100011111011001111101010100101, expected: 24 },
        TestCaseOneArg { arg: 0b011110100111100100000001100110001100001111111000, expected: 23 },
        TestCaseOneArg { arg: 0b011110101010000011110001101001100001100111100001, expected: 23 },
        TestCaseOneArg { arg: 0b011110110101001110101111110111010110000010001101, expected: 28 },
        TestCaseOneArg { arg: 0b011110110101100011000001000001101110010001101110, expected: 23 },
        TestCaseOneArg { arg: 0b100000010100010100010000110101010111100000111011, expected: 20 },
        TestCaseOneArg { arg: 0b100000101000101100100111111110110100100111000010, expected: 23 },
        TestCaseOneArg { arg: 0b100001011000101001011100100101111001011000110011, expected: 23 },
        TestCaseOneArg { arg: 0b100001101101000010011110000001111000000110011010, expected: 20 },
        TestCaseOneArg { arg: 0b100010000100101100101010001100110110010101000110, expected: 20 },
        TestCaseOneArg { arg: 0b100011010001010011011011101000000011101000011011, expected: 22 },
        TestCaseOneArg { arg: 0b100011100110100010111000100101100111010011000100, expected: 22 },
        TestCaseOneArg { arg: 0b100011101110000100011111001011111101010011011110, expected: 28 },
        TestCaseOneArg { arg: 0b100100110111101111100001110111101001000001010011, expected: 26 },
        TestCaseOneArg { arg: 0b100101100000011001100000110110111110011100001011, expected: 23 },
        TestCaseOneArg { arg: 0b100101100000111010101110000011110000010111011010, expected: 23 },
        TestCaseOneArg { arg: 0b100101101000010010011100000111001101011100100100, expected: 21 },
        TestCaseOneArg { arg: 0b101011011110100100011101011111110000000001101110, expected: 26 },
        TestCaseOneArg { arg: 0b101011100000110010110111010011010010011110111100, expected: 26 },
        TestCaseOneArg { arg: 0b101100011000100001111101011110000010111011110000, expected: 24 },
        TestCaseOneArg { arg: 0b101101100100011110111111100110101111010000111010, expected: 29 },
        TestCaseOneArg { arg: 0b101110100001111101100010110111111101000000000110, expected: 25 },
        TestCaseOneArg { arg: 0b110000111110100110001110000010101010111100010011, expected: 24 },
        TestCaseOneArg { arg: 0b110010010110001011100111101001101111111101011111, expected: 31 },
        TestCaseOneArg { arg: 0b110110110010010000000000001100110001011010111101, expected: 21 },
        TestCaseOneArg { arg: 0b111001001110011111010100111001010001110001100110, expected: 26 },
        TestCaseOneArg { arg: 0b111010010111010110100111111011111010100101110010, expected: 30 },
        TestCaseOneArg { arg: 0b111101010000101000010001011011010000111101001111, expected: 24 },
        TestCaseOneArg { arg: 0b111101100101100100110110000010010011001100110110, expected: 24 },
    ];

    #[test]
    fn test_i48() {
        for case in test_cases.span() {
            assert_eq!(__llvm_ctpop_k_k(*case.arg), *case.expected);
        }
    }
}

