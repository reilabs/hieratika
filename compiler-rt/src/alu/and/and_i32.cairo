use core::integer::Bitwise;
extern fn bitwise(lhs: u128, rhs: u128) -> (u128, u128, u128) implicits(Bitwise) nopanic;

pub fn __llvm_and_i32_i32(lhs: u128, rhs: u128) -> u128 {
    let _: u32 = match lhs.try_into() {
        Option::Some(value) => value,
        Option::None => { panic!("lhs = {:?} does not fit in u32", lhs) },
    };

    let _: u32 = match rhs.try_into() {
        Option::Some(value) => value,
        Option::None => { panic!("rhs = {:?} does not fit in u32", rhs) },
    };

    let (and_result, _, _) = bitwise(lhs, rhs);
    and_result
}

#[cfg(test)]
mod tests {
    use super::__llvm_and_i32_i32;
    use crate::alu::test_case::TestCase;
    #[cairofmt::skip]
    pub const test_cases: [TestCase; 43] = [
        // Random test cases
        TestCase{lhs: 0b01000110001100000100011110110000, rhs: 0b01011001010101011011111000011111, expected: 0b01000000000100000000011000010000},
        TestCase{lhs: 0b00001010001100010111110000111011, rhs: 0b01101111100101011111000001010010, expected: 0b00001010000100010111000000010010},
        TestCase{lhs: 0b01111100010110111011100011010000, rhs: 0b00111100011101000101101111101001, expected: 0b00111100010100000001100011000000},
        TestCase{lhs: 0b00110000110011000110010100010001, rhs: 0b00111101010101101011111110100001, expected: 0b00110000010001000010010100000001},
        TestCase{lhs: 0b00111101101010110010000000111100, rhs: 0b00011000101010101111000011001000, expected: 0b00011000101010100010000000001000},
        TestCase{lhs: 0b00000110111100110010101001100111, rhs: 0b01101111011101100101101111111010, expected: 0b00000110011100100000101001100010},
        TestCase{lhs: 0b01110010110110011010001111000000, rhs: 0b01111011001100110100110010000110, expected: 0b01110010000100010000000010000000},
        TestCase{lhs: 0b00000111111000000110111111111110, rhs: 0b00010001010100011111000110011111, expected: 0b00000001010000000110000110011110},
        TestCase{lhs: 0b01000010011100110100101101000101, rhs: 0b00000101011110000111101011101111, expected: 0b00000000011100000100101001000101},
        TestCase{lhs: 0b01101010011110111100001011001011, rhs: 0b01100111011100111000101000100011, expected: 0b01100010011100111000001000000011},
        TestCase{lhs: 0b10101001111111111011100101011100, rhs: 0b00111111110000101010101010100100, expected: 0b00101001110000101010100000000100},
        TestCase{lhs: 0b11111100110010010101001100010010, rhs: 0b00000110001111011101111010111110, expected: 0b00000100000010010101001000010010},
        TestCase{lhs: 0b10100010011110011111010010010010, rhs: 0b00110000101101000100011110100100, expected: 0b00100000001100000100010010000000},
        TestCase{lhs: 0b10010001000111000010110000010010, rhs: 0b01111000110111111110010110000011, expected: 0b00010000000111000010010000000010},
        TestCase{lhs: 0b11001001110000010111010100100000, rhs: 0b01010101110000100100111001100111, expected: 0b01000001110000000100010000100000},
        TestCase{lhs: 0b11000011000111110010110111100000, rhs: 0b01010101010101001101101010110001, expected: 0b01000001000101000000100010100000},
        TestCase{lhs: 0b10100011010011000000110101010010, rhs: 0b00010111000011110011000000101110, expected: 0b00000011000011000000000000000010},
        TestCase{lhs: 0b10010111000110101000100011100111, rhs: 0b01001001101000010011001001100110, expected: 0b00000001000000000000000001100110},
        TestCase{lhs: 0b10101111100100101101010111100100, rhs: 0b01010100010100010000000010010010, expected: 0b00000100000100000000000010000000},
        TestCase{lhs: 0b11111101011001010011111000111100, rhs: 0b01111101101011110001010101010110, expected: 0b01111101001001010001010000010100},
        TestCase{lhs: 0b00011011101011111011110110100101, rhs: 0b10101101101001110100011010001000, expected: 0b00001001101001110000010010000000},
        TestCase{lhs: 0b00110110101100101010011100110010, rhs: 0b11110011000111110000100110011101, expected: 0b00110010000100100000000100010000},
        TestCase{lhs: 0b01011110001001111010001011110111, rhs: 0b11111111111101110011001001010000, expected: 0b01011110001001110010001001010000},
        TestCase{lhs: 0b01001111010000001011100101100110, rhs: 0b10001110010100011011110100101110, expected: 0b00001110010000001011100100100110},
        TestCase{lhs: 0b00100010111101011111110100000001, rhs: 0b11011011100000100111110111111111, expected: 0b00000010100000000111110100000001},
        TestCase{lhs: 0b00111001011010100001011011000111, rhs: 0b10001100001000010100110110011011, expected: 0b00001000001000000000010010000011},
        TestCase{lhs: 0b01110111100110110100011011100101, rhs: 0b10110110010100110010000010101100, expected: 0b00110110000100110000000010100100},
        TestCase{lhs: 0b00111101010100111110111110110011, rhs: 0b11101000011001011001101100000011, expected: 0b00101000010000011000101100000011},
        TestCase{lhs: 0b00100110101001110100100010101011, rhs: 0b10000111101111000010100011000001, expected: 0b00000110101001000000100010000001},
        TestCase{lhs: 0b01100000110100100000001011000000, rhs: 0b11001010011001110110011010011011, expected: 0b01000000010000100000001010000000},
        TestCase{lhs: 0b10000010110001000010000000100001, rhs: 0b10110110011100001110110111010111, expected: 0b10000010010000000010000000000001},
        TestCase{lhs: 0b11000100000111100100111000110010, rhs: 0b10000010011111001001111001100110, expected: 0b10000000000111000000111000100010},
        TestCase{lhs: 0b10100000100111011000010011100100, rhs: 0b11011100011110010011101011011101, expected: 0b10000000000110010000000011000100},
        TestCase{lhs: 0b10010000111010101110010101001100, rhs: 0b11101110101000001000100000010110, expected: 0b10000000101000001000000000000100},
        TestCase{lhs: 0b10101000111011110010011110010110, rhs: 0b11010100110100100000010000001110, expected: 0b10000000110000100000010000000110},
        TestCase{lhs: 0b11000010010001011110000100111101, rhs: 0b11011111000100000010011011010101, expected: 0b11000010000000000010000000010101},
        TestCase{lhs: 0b10101001001011111101110110100111, rhs: 0b11110011110111100101010011100111, expected: 0b10100001000011100101010010100111},
        TestCase{lhs: 0b10000000100001001111111011010101, rhs: 0b10110110111010001000010001101011, expected: 0b10000000100000001000010001000001},
        TestCase{lhs: 0b10000001000110001000001000101101, rhs: 0b10101000110011000110100111101011, expected: 0b10000000000010000000000000101001},
        TestCase{lhs: 0b10010100010001110100101101111010, rhs: 0b11111101001110101000001001111111, expected: 0b10010100000000100000001001111010},

        // Edge cases
        TestCase{lhs: 0b11111111111111111111111111111111, rhs: 0b11111111111111111111111111111111, expected: 0b11111111111111111111111111111111}, // Edge case: max & max (all bits set)
        TestCase{lhs: 0b00000000000000000000000000000000, rhs: 0b00000000000000000000000000000000, expected: 0b00000000000000000000000000000000}, // Edge case: min & min (no bits set)
        TestCase{lhs: 0b11111111111111111111111111111111, rhs: 0b00000000000000000000000000000000, expected: 0b00000000000000000000000000000000}, // Edge case: max & min (all bits vs no bits)
    ];

    #[test]
    fn test_i32() {
        for case in test_cases
            .span() {
                assert_eq!(__llvm_and_i32_i32(*case.lhs, *case.rhs), *case.expected);
            }
    }
}
