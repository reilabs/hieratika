use crate::alu::bswap::bswap;
use crate::integer::u40::u40;

pub fn __llvm_bswap_n_n(value: u128) -> u128 {
    bswap::<u40>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bswap_n_n;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 30] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b0001000101011100011110001111000111011111, expected: 0b1101111111110001011110000101110000010001 },
        TestCaseOneArg { arg: 0b0001101011011000010000000111110101000001, expected: 0b0100000101111101010000001101100000011010 },
        TestCaseOneArg { arg: 0b0001111000000010111011011110011111110100, expected: 0b1111010011100111111011010000001000011110 },
        TestCaseOneArg { arg: 0b0010000010011000110000110000110110011011, expected: 0b1001101100001101110000111001100000100000 },
        TestCaseOneArg { arg: 0b0010111010100000110001100101110111011110, expected: 0b1101111001011101110001101010000000101110 },
        TestCaseOneArg { arg: 0b0011010100011101011111100010001001010000, expected: 0b0101000000100010011111100001110100110101 },
        TestCaseOneArg { arg: 0b0100001101001101101101011011001010001101, expected: 0b1000110110110010101101010100110101000011 },
        TestCaseOneArg { arg: 0b0101000100101101110101101011001100001000, expected: 0b0000100010110011110101100010110101010001 },
        TestCaseOneArg { arg: 0b0101110011111001101011000111101101111000, expected: 0b0111100001111011101011001111100101011100 },
        TestCaseOneArg { arg: 0b0101111110011110101100110100001001010110, expected: 0b0101011001000010101100111001111001011111 },
        TestCaseOneArg { arg: 0b0111001010111111010011110111001101010111, expected: 0b0101011101110011010011111011111101110010 },
        TestCaseOneArg { arg: 0b0111110001101111001110011001100110011010, expected: 0b1001101010011001001110010110111101111100 },
        TestCaseOneArg { arg: 0b0111110110000011000011011100011111110010, expected: 0b1111001011000111000011011000001101111101 },
        TestCaseOneArg { arg: 0b0111110111110011110011011111011001100111, expected: 0b0110011111110110110011011111001101111101 },
        TestCaseOneArg { arg: 0b0111111110000010101010010010010101000000, expected: 0b0100000000100101101010011000001001111111 },
        TestCaseOneArg { arg: 0b1000101010100100011110000011100001111110, expected: 0b0111111000111000011110001010010010001010 },
        TestCaseOneArg { arg: 0b1000101111101100100000010111100110000110, expected: 0b1000011001111001100000011110110010001011 },
        TestCaseOneArg { arg: 0b1001001010101000101001001010011100100100, expected: 0b0010010010100111101001001010100010010010 },
        TestCaseOneArg { arg: 0b1010000100000110101111101010111011111011, expected: 0b1111101110101110101111100000011010100001 },
        TestCaseOneArg { arg: 0b1010100101100010101011101110110110010101, expected: 0b1001010111101101101011100110001010101001 },
        TestCaseOneArg { arg: 0b1011001011101000000111100010011100011001, expected: 0b0001100100100111000111101110100010110010 },
        TestCaseOneArg { arg: 0b1011010010010100110100011000100011001100, expected: 0b1100110010001000110100011001010010110100 },
        TestCaseOneArg { arg: 0b1011101011101011100101110101010101101010, expected: 0b0110101001010101100101111110101110111010 },
        TestCaseOneArg { arg: 0b1100110001011110110010000010111111101101, expected: 0b1110110100101111110010000101111011001100 },
        TestCaseOneArg { arg: 0b1101111000000110110011110010101111000111, expected: 0b1100011100101011110011110000011011011110 },
        TestCaseOneArg { arg: 0b1110010001001110010110111101101010000111, expected: 0b1000011111011010010110110100111011100100 },
        TestCaseOneArg { arg: 0b1110110010000111001011011011001010001010, expected: 0b1000101010110010001011011000011111101100 },
        TestCaseOneArg { arg: 0b1111011111110110011101001101101100100001, expected: 0b0010000111011011011101001111011011110111 },
        TestCaseOneArg { arg: 0b1111110011111110011011010010001010001011, expected: 0b1000101100100010011011011111111011111100 },
        TestCaseOneArg { arg: 0b1111111011010110000001010111010010000010, expected: 0b1000001001110100000001011101011011111110 },
    ];

    #[test]
    fn test_i40() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bswap_n_n(*case.arg), *case.expected);
        }
    }
}
