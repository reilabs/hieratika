use crate::alu::bswap::bswap;
use crate::integer::u48::u48;

pub fn __llvm_bswap_k_k(value: u128) -> u128 {
    bswap::<u48>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bswap_k_k;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000000000010010101000000111001000001100001100010, expected: 0b011000100001100011100100010000000010010100000000 },
        TestCaseOneArg { arg: 0b000010001101100011100001101100111001000100000000, expected: 0b000000001001000110110011111000011101100000001000 },
        TestCaseOneArg { arg: 0b000011001011100010111000110111010100101111000011, expected: 0b110000110100101111011101101110001011100000001100 },
        TestCaseOneArg { arg: 0b000101010011101110111110111011001101100010011001, expected: 0b100110011101100011101100101111100011101100010101 },
        TestCaseOneArg { arg: 0b000110000101111001000001000000101011010110010000, expected: 0b100100001011010100000010010000010101111000011000 },
        TestCaseOneArg { arg: 0b000110001100011111010100101001101001000000101001, expected: 0b001010011001000010100110110101001100011100011000 },
        TestCaseOneArg { arg: 0b000110011010001000110000011110011000101001011001, expected: 0b010110011000101001111001001100001010001000011001 },
        TestCaseOneArg { arg: 0b000110100011011100101000010100001000100011101000, expected: 0b111010001000100001010000001010000011011100011010 },
        TestCaseOneArg { arg: 0b000110110101011111010001000101011000101101110001, expected: 0b011100011000101100010101110100010101011100011011 },
        TestCaseOneArg { arg: 0b001000000100100110000111010110101011011111000000, expected: 0b110000001011011101011010100001110100100100100000 },
        TestCaseOneArg { arg: 0b001010101100101110111011011010101010000011010111, expected: 0b110101111010000001101010101110111100101100101010 },
        TestCaseOneArg { arg: 0b001010110101110010011100101011010110010110100000, expected: 0b101000000110010110101101100111000101110000101011 },
        TestCaseOneArg { arg: 0b001011011010000001011000101110111101110111001111, expected: 0b110011111101110110111011010110001010000000101101 },
        TestCaseOneArg { arg: 0b001101100101110000101101001011101011001100100101, expected: 0b001001011011001100101110001011010101110000110110 },
        TestCaseOneArg { arg: 0b001111001110101000010110010000001101101101011001, expected: 0b010110011101101101000000000101101110101000111100 },
        TestCaseOneArg { arg: 0b010000101101000111001110101010011110101100100000, expected: 0b001000001110101110101001110011101101000101000010 },
        TestCaseOneArg { arg: 0b010001000000010100101110111011010101101000111011, expected: 0b001110110101101011101101001011100000010101000100 },
        TestCaseOneArg { arg: 0b010001000001010000001000000010011001100100101101, expected: 0b001011011001100100001001000010000001010001000100 },
        TestCaseOneArg { arg: 0b010001011101011110001011100100001001101100100001, expected: 0b001000011001101110010000100010111101011101000101 },
        TestCaseOneArg { arg: 0b010010001001101110110110101100101111110101111101, expected: 0b011111011111110110110010101101101001101101001000 },
        TestCaseOneArg { arg: 0b010011000000000111110000000001001111000100111100, expected: 0b001111001111000100000100111100000000000101001100 },
        TestCaseOneArg { arg: 0b010011000010100110000011010110111011010001011101, expected: 0b010111011011010001011011100000110010100101001100 },
        TestCaseOneArg { arg: 0b010100001100100011100110010100010111111000101100, expected: 0b001011000111111001010001111001101100100001010000 },
        TestCaseOneArg { arg: 0b010101011001100111001101100110101111010011010100, expected: 0b110101001111010010011010110011011001100101010101 },
        TestCaseOneArg { arg: 0b010111010110011001001011000001000111001111000111, expected: 0b110001110111001100000100010010110110011001011101 },
        TestCaseOneArg { arg: 0b011001000000000101101110110011000011010100101111, expected: 0b001011110011010111001100011011100000000101100100 },
        TestCaseOneArg { arg: 0b011001111101001101010110001111011111100101011011, expected: 0b010110111111100100111101010101101101001101100111 },
        TestCaseOneArg { arg: 0b100001010110110111010111000010110111101010100010, expected: 0b101000100111101000001011110101110110110110000101 },
        TestCaseOneArg { arg: 0b100001110010110111000001010100101000000010111011, expected: 0b101110111000000001010010110000010010110110000111 },
        TestCaseOneArg { arg: 0b100011000010001010000110001101100111100000000110, expected: 0b000001100111100000110110100001100010001010001100 },
        TestCaseOneArg { arg: 0b100101000110110111011100100011110001011000101111, expected: 0b001011110001011010001111110111000110110110010100 },
        TestCaseOneArg { arg: 0b100110001011001101000010001011100100000000011011, expected: 0b000110110100000000101110010000101011001110011000 },
        TestCaseOneArg { arg: 0b100111000100011010000011100001101100110011010010, expected: 0b110100101100110010000110100000110100011010011100 },
        TestCaseOneArg { arg: 0b101001001001111000111001011010101011100010011011, expected: 0b100110111011100001101010001110011001111010100100 },
        TestCaseOneArg { arg: 0b101010011001011100011000110100100101001010101011, expected: 0b101010110101001011010010000110001001011110101001 },
        TestCaseOneArg { arg: 0b101010101000100011110000100010010110110001101001, expected: 0b011010010110110010001001111100001000100010101010 },
        TestCaseOneArg { arg: 0b101010110111101101100111111110011110010001111111, expected: 0b011111111110010011111001011001110111101110101011 },
        TestCaseOneArg { arg: 0b101101001001011000000111111011100011101011101010, expected: 0b111010100011101011101110000001111001011010110100 },
        TestCaseOneArg { arg: 0b101110100000001010001101011000011001011101000000, expected: 0b010000001001011101100001100011010000001010111010 },
        TestCaseOneArg { arg: 0b101110110010000111010000101110101000100010001010, expected: 0b100010101000100010111010110100000010000110111011 },
        TestCaseOneArg { arg: 0b110000101100000110001001000101001000011010010101, expected: 0b100101011000011000010100100010011100000111000010 },
        TestCaseOneArg { arg: 0b110000111111100100011100111011000010111100001010, expected: 0b000010100010111111101100000111001111100111000011 },
        TestCaseOneArg { arg: 0b110001010000110100101111111110001010011000111000, expected: 0b001110001010011011111000001011110000110111000101 },
        TestCaseOneArg { arg: 0b110010010000101110011100111000100010101011110100, expected: 0b111101000010101011100010100111000000101111001001 },
        TestCaseOneArg { arg: 0b110010100011001101001101111111101011110011101010, expected: 0b111010101011110011111110010011010011001111001010 },
        TestCaseOneArg { arg: 0b110010111100000010100000100000010111001001101100, expected: 0b011011000111001010000001101000001100000011001011 },
        TestCaseOneArg { arg: 0b110011101011110110010010001111101001101001100111, expected: 0b011001111001101000111110100100101011110111001110 },
        TestCaseOneArg { arg: 0b110100001101001010011000110001011011111000011010, expected: 0b000110101011111011000101100110001101001011010000 },
        TestCaseOneArg { arg: 0b110100101110110011110000110011110011101001011111, expected: 0b010111110011101011001111111100001110110011010010 },
        TestCaseOneArg { arg: 0b110101000001011100110110111001011101000100100011, expected: 0b001000111101000111100101001101100001011111010100 },
        TestCaseOneArg { arg: 0b110110010000101000001101111101100010100111001001, expected: 0b110010010010100111110110000011010000101011011001 },
        TestCaseOneArg { arg: 0b110110010110100010000110110000111100001111001001, expected: 0b110010011100001111000011100001100110100011011001 },
        TestCaseOneArg { arg: 0b110111100010010011011100110001000110100011110111, expected: 0b111101110110100011000100110111000010010011011110 },
        TestCaseOneArg { arg: 0b111000110111111101001100010011111101100101001110, expected: 0b010011101101100101001111010011000111111111100011 },
        TestCaseOneArg { arg: 0b111001101001000000000101000010110000001100011000, expected: 0b000110000000001100001011000001011001000011100110 },
        TestCaseOneArg { arg: 0b111001111010101001110101111000001100100010011010, expected: 0b100110101100100011100000011101011010101011100111 },
        TestCaseOneArg { arg: 0b111010000100100001001010011001111111011111111000, expected: 0b111110001111011101100111010010100100100011101000 },
        TestCaseOneArg { arg: 0b111011110101010110100111001001010110000110101110, expected: 0b101011100110000100100101101001110101010111101111 },
        TestCaseOneArg { arg: 0b111100111110000010110010101011101101101011010111, expected: 0b110101111101101010101110101100101110000011110011 },
        TestCaseOneArg { arg: 0b111110110111011010000011010000010010010011001110, expected: 0b110011100010010001000001100000110111011011111011 },
    ];

    #[test]
    fn test_i48() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bswap_k_k(*case.arg), *case.expected);
        }
    }
}
