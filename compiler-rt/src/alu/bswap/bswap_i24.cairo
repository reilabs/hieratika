use crate::alu::bswap::bswap;
use crate::integer::u24::u24;

pub fn __llvm_bswap_x_x(value: u128) -> u128 {
    bswap::<u24>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bswap_x_x;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000000001010110100001100, expected: 0b000011001010110100000000 },
        TestCaseOneArg { arg: 0b000000011010011111001110, expected: 0b110011101010011100000001 },
        TestCaseOneArg { arg: 0b000010001101000110100001, expected: 0b101000011101000100001000 },
        TestCaseOneArg { arg: 0b000011000110111010111000, expected: 0b101110000110111000001100 },
        TestCaseOneArg { arg: 0b000011010011101010101100, expected: 0b101011000011101000001101 },
        TestCaseOneArg { arg: 0b000100110110010110101001, expected: 0b101010010110010100010011 },
        TestCaseOneArg { arg: 0b000101101111001000101111, expected: 0b001011111111001000010110 },
        TestCaseOneArg { arg: 0b000110111000000011100001, expected: 0b111000011000000000011011 },
        TestCaseOneArg { arg: 0b000111101000010100011111, expected: 0b000111111000010100011110 },
        TestCaseOneArg { arg: 0b001010101011000010111011, expected: 0b101110111011000000101010 },
        TestCaseOneArg { arg: 0b001011110010111100111000, expected: 0b001110000010111100101111 },
        TestCaseOneArg { arg: 0b001111010010110100010010, expected: 0b000100100010110100111101 },
        TestCaseOneArg { arg: 0b010010100001111000000011, expected: 0b000000110001111001001010 },
        TestCaseOneArg { arg: 0b010010101111000100111001, expected: 0b001110011111000101001010 },
        TestCaseOneArg { arg: 0b010010110011010000010001, expected: 0b000100010011010001001011 },
        TestCaseOneArg { arg: 0b010100010011111001000010, expected: 0b010000100011111001010001 },
        TestCaseOneArg { arg: 0b010111101111011011110001, expected: 0b111100011111011001011110 },
        TestCaseOneArg { arg: 0b010111111101100011110011, expected: 0b111100111101100001011111 },
        TestCaseOneArg { arg: 0b011000011010001000110011, expected: 0b001100111010001001100001 },
        TestCaseOneArg { arg: 0b011010100110011000011000, expected: 0b000110000110011001101010 },
        TestCaseOneArg { arg: 0b011100101111111000010011, expected: 0b000100111111111001110010 },
        TestCaseOneArg { arg: 0b011101001100001011110111, expected: 0b111101111100001001110100 },
        TestCaseOneArg { arg: 0b011101110110110100110101, expected: 0b001101010110110101110111 },
        TestCaseOneArg { arg: 0b011101111110000111110111, expected: 0b111101111110000101110111 },
        TestCaseOneArg { arg: 0b011111001110100001011100, expected: 0b010111001110100001111100 },
        TestCaseOneArg { arg: 0b011111011010010001100000, expected: 0b011000001010010001111101 },
        TestCaseOneArg { arg: 0b100000001110101000000010, expected: 0b000000101110101010000000 },
        TestCaseOneArg { arg: 0b100000001111110101111110, expected: 0b011111101111110110000000 },
        TestCaseOneArg { arg: 0b100010010100100011101011, expected: 0b111010110100100010001001 },
        TestCaseOneArg { arg: 0b100011011010100101001010, expected: 0b010010101010100110001101 },
        TestCaseOneArg { arg: 0b100011111000101100011000, expected: 0b000110001000101110001111 },
        TestCaseOneArg { arg: 0b100100010111010110000001, expected: 0b100000010111010110010001 },
        TestCaseOneArg { arg: 0b101000001000001101001001, expected: 0b010010011000001110100000 },
        TestCaseOneArg { arg: 0b101000001110011100000100, expected: 0b000001001110011110100000 },
        TestCaseOneArg { arg: 0b101011100011101010111110, expected: 0b101111100011101010101110 },
        TestCaseOneArg { arg: 0b101100010010101001110110, expected: 0b011101100010101010110001 },
        TestCaseOneArg { arg: 0b101100101110100110111011, expected: 0b101110111110100110110010 },
        TestCaseOneArg { arg: 0b101100110000100111001000, expected: 0b110010000000100110110011 },
        TestCaseOneArg { arg: 0b101101001001010010101001, expected: 0b101010011001010010110100 },
        TestCaseOneArg { arg: 0b101101100110001001100010, expected: 0b011000100110001010110110 },
        TestCaseOneArg { arg: 0b101101101101000001101111, expected: 0b011011111101000010110110 },
        TestCaseOneArg { arg: 0b110000110011011000101101, expected: 0b001011010011011011000011 },
        TestCaseOneArg { arg: 0b110001011100100110011011, expected: 0b100110111100100111000101 },
        TestCaseOneArg { arg: 0b110011011011111110101101, expected: 0b101011011011111111001101 },
        TestCaseOneArg { arg: 0b110111010101100000010010, expected: 0b000100100101100011011101 },
        TestCaseOneArg { arg: 0b110111110101011000010001, expected: 0b000100010101011011011111 },
        TestCaseOneArg { arg: 0b110111111001011100010100, expected: 0b000101001001011111011111 },
        TestCaseOneArg { arg: 0b111000000011101010110111, expected: 0b101101110011101011100000 },
        TestCaseOneArg { arg: 0b111000100101011110000111, expected: 0b100001110101011111100010 },
        TestCaseOneArg { arg: 0b111010000010000111111000, expected: 0b111110000010000111101000 },
        TestCaseOneArg { arg: 0b111010000110001000110011, expected: 0b001100110110001011101000 },
        TestCaseOneArg { arg: 0b111010001110100110000101, expected: 0b100001011110100111101000 },
        TestCaseOneArg { arg: 0b111010011111000111111100, expected: 0b111111001111000111101001 },
        TestCaseOneArg { arg: 0b111011011001111011001100, expected: 0b110011001001111011101101 },
        TestCaseOneArg { arg: 0b111011101000100110101000, expected: 0b101010001000100111101110 },
        TestCaseOneArg { arg: 0b111011110000001100100000, expected: 0b001000000000001111101111 },
        TestCaseOneArg { arg: 0b111100001101111110111010, expected: 0b101110101101111111110000 },
        TestCaseOneArg { arg: 0b111100101010100101001001, expected: 0b010010011010100111110010 },
        TestCaseOneArg { arg: 0b111110000111010000010000, expected: 0b000100000111010011111000 },
        TestCaseOneArg { arg: 0b111110010000101111110000, expected: 0b111100000000101111111001 },
    ];

    #[test]
    fn test_i24() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bswap_x_x(*case.arg), *case.expected);
        }
    }
}
