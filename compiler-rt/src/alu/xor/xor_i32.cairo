use crate::rtstate::RTState;
use crate::alu::xor::xor;

pub fn __llvm_xor_i_i_i(ref state: RTState, lhs: u128, rhs: u128) -> u128 {
    xor::<u32>(lhs, rhs)
}

#[cfg(test)]
mod tests {
    use crate::rtstate::RTStateOps;
    use super::__llvm_xor_i_i_i;
    use crate::alu::test_case::TestCaseTwoArgs;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseTwoArgs; 43] = [
        // Random test cases
        TestCaseTwoArgs{lhs: 0b00000010111100001010000000100000, rhs: 0b01000111010011101100000111110111, expected: 0b01000101101111100110000111010111},
        TestCaseTwoArgs{lhs: 0b01001011111001110111010001111100, rhs: 0b00110111010110100100111001001010, expected: 0b01111100101111010011101000110110},
        TestCaseTwoArgs{lhs: 0b01100011100011011101100010001001, rhs: 0b01111111000101011000010101110000, expected: 0b00011100100110000101110111111001},
        TestCaseTwoArgs{lhs: 0b00001110000000011001001001110000, rhs: 0b01011101110111001100110101010101, expected: 0b01010011110111010101111100100101},
        TestCaseTwoArgs{lhs: 0b00110001111011011011001000001110, rhs: 0b01011101011011110001111000010100, expected: 0b01101100100000101010110000011010},
        TestCaseTwoArgs{lhs: 0b01001101111010101001011001111100, rhs: 0b00111111010101101101000000100100, expected: 0b01110010101111000100011001011000},
        TestCaseTwoArgs{lhs: 0b01111111110100000101011011100100, rhs: 0b01011101100100010010010111111111, expected: 0b00100010010000010111001100011011},
        TestCaseTwoArgs{lhs: 0b01000010000000011100000011001100, rhs: 0b00100000000111010101110110100110, expected: 0b01100010000111001001110101101010},
        TestCaseTwoArgs{lhs: 0b00100011101000100111000100001110, rhs: 0b01001011101111010001001000000101, expected: 0b01101000000111110110001100001011},
        TestCaseTwoArgs{lhs: 0b00011101101001000111101000111000, rhs: 0b00011010000111010010010110000011, expected: 0b00000111101110010101111110111011},
        TestCaseTwoArgs{lhs: 0b11010110000110100001110001001001, rhs: 0b01111001101111101110101000101100, expected: 0b10101111101001001111011001100101},
        TestCaseTwoArgs{lhs: 0b10001110011010010001000101010100, rhs: 0b00101110001100011110001110001111, expected: 0b10100000010110001111001011011011},
        TestCaseTwoArgs{lhs: 0b11110001110001101011000001100001, rhs: 0b00000101000100110011111011110101, expected: 0b11110100110101011000111010010100},
        TestCaseTwoArgs{lhs: 0b10101000110001101011101101100111, rhs: 0b01000110111001111111000010100011, expected: 0b11101110001000010100101111000100},
        TestCaseTwoArgs{lhs: 0b10110110110010100111100011110011, rhs: 0b01000101100100000101001100011110, expected: 0b11110011010110100010101111101101},
        TestCaseTwoArgs{lhs: 0b11101100110101011111001100011011, rhs: 0b01101101000000100100100100111110, expected: 0b10000001110101111011101000100101},
        TestCaseTwoArgs{lhs: 0b10111000100111111101010111001110, rhs: 0b01010110011000101011011000100001, expected: 0b11101110111111010110001111101111},
        TestCaseTwoArgs{lhs: 0b11010110101001000000100110100001, rhs: 0b00001110100101101011001110111101, expected: 0b11011000001100101011101000011100},
        TestCaseTwoArgs{lhs: 0b10000110101100110101000110010111, rhs: 0b01110000010100001101000011000101, expected: 0b11110110111000111000000101010010},
        TestCaseTwoArgs{lhs: 0b11011001011111010110001010101100, rhs: 0b01010101001011100010000100000010, expected: 0b10001100010100110100001110101110},
        TestCaseTwoArgs{lhs: 0b00011111100000111111000001100011, rhs: 0b11010110010001111001100010000001, expected: 0b11001001110001000110100011100010},
        TestCaseTwoArgs{lhs: 0b01000001010101111001101101001100, rhs: 0b11110011010110110000001101010100, expected: 0b10110010000011001001100000011000},
        TestCaseTwoArgs{lhs: 0b00110111000101100110011001100110, rhs: 0b11000001100010100001011000110011, expected: 0b11110110100111000111000001010101},
        TestCaseTwoArgs{lhs: 0b00111000110011110000101110110010, rhs: 0b11000001001001011101010101000001, expected: 0b11111001111010101101111011110011},
        TestCaseTwoArgs{lhs: 0b00010100111110100101101101111110, rhs: 0b11010010100011001011011110000011, expected: 0b11000110011101101110110011111101},
        TestCaseTwoArgs{lhs: 0b01110000101110101000010011110010, rhs: 0b11110000111111011100000111000010, expected: 0b10000000010001110100010100110000},
        TestCaseTwoArgs{lhs: 0b01110110010001010111001011100111, rhs: 0b10101111101110111111000111000100, expected: 0b11011001111111101000001100100011},
        TestCaseTwoArgs{lhs: 0b01110111100001111100010010011101, rhs: 0b10110000001101001111111111100100, expected: 0b11000111101100110011101101111001},
        TestCaseTwoArgs{lhs: 0b01110001010010101000001101110110, rhs: 0b11011001111101001111010010011001, expected: 0b10101000101111100111011111101111},
        TestCaseTwoArgs{lhs: 0b01111001101111010000111001100111, rhs: 0b11110001100101110001010110111100, expected: 0b10001000001010100001101111011011},
        TestCaseTwoArgs{lhs: 0b10101111110000010110010000101110, rhs: 0b11101100111100000001110011110011, expected: 0b01000011001100010111100011011101},
        TestCaseTwoArgs{lhs: 0b11111110110110010101000111001110, rhs: 0b10100110000000010011110101011010, expected: 0b01011000110110000110110010010100},
        TestCaseTwoArgs{lhs: 0b11000011000001100100101111001111, rhs: 0b10101111001110111001010010101100, expected: 0b01101100001111011101111101100011},
        TestCaseTwoArgs{lhs: 0b11011101100001001100110011001110, rhs: 0b11110000110100010110110110111111, expected: 0b00101101010101011010000101110001},
        TestCaseTwoArgs{lhs: 0b10000001001011001010111101000101, rhs: 0b10011111101001000110001100001001, expected: 0b00011110100010001100110001001100},
        TestCaseTwoArgs{lhs: 0b10110100010100001011000001111001, rhs: 0b11000010001000101100100111001100, expected: 0b01110110011100100111100110110101},
        TestCaseTwoArgs{lhs: 0b11101111011111111001010111001010, rhs: 0b10001110111000000100101110101111, expected: 0b01100001100111111101111001100101},
        TestCaseTwoArgs{lhs: 0b11000010111110000011000011100100, rhs: 0b10100011001001001011111110001010, expected: 0b01100001110111001000111101101110},
        TestCaseTwoArgs{lhs: 0b10000010000111100111101110110110, rhs: 0b10110100010100100011100010001100, expected: 0b00110110010011000100001100111010},
        TestCaseTwoArgs{lhs: 0b10101011011100011101111100011110, rhs: 0b11111011000010111110000000111100, expected: 0b01010000011110100011111100100010},

        // Edge cases
        TestCaseTwoArgs{lhs: 0b11111111111111111111111111111111, rhs: 0b11111111111111111111111111111111, expected: 0b00000000000000000000000000000000}, // Edge case: max & max (all bits set)
        TestCaseTwoArgs{lhs: 0b00000000000000000000000000000000, rhs: 0b00000000000000000000000000000000, expected: 0b00000000000000000000000000000000}, // Edge case: min & min (no bits set)
        TestCaseTwoArgs{lhs: 0b11111111111111111111111111111111, rhs: 0b00000000000000000000000000000000, expected: 0b11111111111111111111111111111111}, // Edge case: max & min (all bits vs no bits)
    ];

    #[test]
    fn test_i32() {
        for case in test_cases.span() {
            let mut state = RTStateOps::new();
            assert_eq!(__llvm_xor_i_i_i(ref state, *case.lhs, *case.rhs), *case.expected);
        }
    }
}
