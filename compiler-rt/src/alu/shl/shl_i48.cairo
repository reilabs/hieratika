use crate::alu::shl::shl;
use crate::integer::u48::u48;

pub fn __llvm_shl_k_k_k(n: u128, shift: u128) -> u128 {
    shl::<u48>(n, shift)
}

#[cfg(test)]
mod tests {
    use super::__llvm_shl_k_k_k;
    use crate::alu::test_case::TestCaseTwoArgs;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseTwoArgs; 36] = [
        // A sample of possible shifts on -1 from 0 throughout the whole input value length.
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 0,  expected: 0b111111111111111111111111111111111111111111111111 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 1,  expected: 0b111111111111111111111111111111111111111111111110 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 2,  expected: 0b111111111111111111111111111111111111111111111100 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 3,  expected: 0b111111111111111111111111111111111111111111111000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 4,  expected: 0b111111111111111111111111111111111111111111110000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 6,  expected: 0b111111111111111111111111111111111111111111000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 8,  expected: 0b111111111111111111111111111111111111111100000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 9,  expected: 0b111111111111111111111111111111111111111000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 11, expected: 0b111111111111111111111111111111111111100000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 13, expected: 0b111111111111111111111111111111111110000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 15, expected: 0b111111111111111111111111111111111000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 19, expected: 0b111111111111111111111111111110000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 23, expected: 0b111111111111111111111111100000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 31, expected: 0b111111111111111110000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 39, expected: 0b111111111000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 47, expected: 0b100000000000000000000000000000000000000000000000 },

        // Shifts by more bits than the input value contains - overflow should cause loss of the excessive bits
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 49,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 90,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b111111111111111111111111111111111111111111111111, rhs: 123, expected: 0b000000000000000000000000000000000000000000000000 },

        // The same set of operations but on a zero bit pattern
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 0,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 1,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 2,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 3,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 4,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 6,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 8,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 9,  expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 11, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 13, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 15, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 19, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 23, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 31, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 39, expected: 0b000000000000000000000000000000000000000000000000 },
        TestCaseTwoArgs { lhs: 0b000000000000000000000000000000000000000000000000, rhs: 47, expected: 0b000000000000000000000000000000000000000000000000 },

        // Shift of a mixed 0/1 bit pattern
        TestCaseTwoArgs { lhs: 0b101010101010101010101010101010101010101010101010, rhs: 8, expected: 0b101010101010101010101010101010101010101000000000 },
    ];

    #[test]
    fn test_i48() {
        for case in test_cases.span() {
            assert_eq!(__llvm_shl_k_k_k(*case.lhs, *case.rhs), *case.expected);
        }
    }
}
