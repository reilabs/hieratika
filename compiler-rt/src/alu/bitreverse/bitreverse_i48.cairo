use crate::alu::bitreverse::bitreverse;
use crate::integer::u48::u48;

pub fn __llvm_bitreverse_k_k(value: u128) -> u128 {
    bitreverse::<u48>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bitreverse_k_k;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000001010000100100011000010100101001011001100101, expected: 0b101001100110100101001010000110001001000010100000 },
        TestCaseOneArg { arg: 0b000100101101000111110001001011000001101001000011, expected: 0b110000100101100000110100100011111000101101001000 },
        TestCaseOneArg { arg: 0b000101000111000011100101011000010001101100110011, expected: 0b110011001101100010000110101001110000111000101000 },
        TestCaseOneArg { arg: 0b001000101101100010100010010011110101110111111010, expected: 0b010111111011101011110010010001010001101101000100 },
        TestCaseOneArg { arg: 0b001000111010000001110010011101100110010111101000, expected: 0b000101111010011001101110010011100000010111000100 },
        TestCaseOneArg { arg: 0b001001010011011001111000101100100010001110100010, expected: 0b010001011100010001001101000111100110110010100100 },
        TestCaseOneArg { arg: 0b001010111111111110110000100000011010101110101000, expected: 0b000101011101010110000001000011011111111111010100 },
        TestCaseOneArg { arg: 0b001101001010011011110000000101001111100001011101, expected: 0b101110100001111100101000000011110110010100101100 },
        TestCaseOneArg { arg: 0b001101011001110010010110100001110010101010100111, expected: 0b111001010101010011100001011010010011100110101100 },
        TestCaseOneArg { arg: 0b001101100111111010100011100100011011111100100001, expected: 0b100001001111110110001001110001010111111001101100 },
        TestCaseOneArg { arg: 0b010000111110110010110100001100100110000010011100, expected: 0b001110010000011001001100001011010011011111000010 },
        TestCaseOneArg { arg: 0b010001001101011011101100000101100011110100111001, expected: 0b100111001011110001101000001101110110101100100010 },
        TestCaseOneArg { arg: 0b010011110110000000001110000100011100100011101010, expected: 0b010101110001001110001000011100000000011011110010 },
        TestCaseOneArg { arg: 0b010100110111011010011010111100001011111100010101, expected: 0b101010001111110100001111010110010110111011001010 },
        TestCaseOneArg { arg: 0b010101111000000111111000010010101101110100011100, expected: 0b001110001011101101010010000111111000000111101010 },
        TestCaseOneArg { arg: 0b010110000011110011100011101011100010010111010100, expected: 0b001010111010010001110101110001110011110000011010 },
        TestCaseOneArg { arg: 0b010110011011110000001001110000001101110100001110, expected: 0b011100001011101100000011100100000011110110011010 },
        TestCaseOneArg { arg: 0b010111011101110100001101011010010011101001110100, expected: 0b001011100101110010010110101100001011101110111010 },
        TestCaseOneArg { arg: 0b010111110011001101011011100101111100000000001110, expected: 0b011100000000001111101001110110101100110011111010 },
        TestCaseOneArg { arg: 0b010111111000001111000110101100011110101101101110, expected: 0b011101101101011110001101011000111100000111111010 },
        TestCaseOneArg { arg: 0b011000000011101011000001001101100111111100011111, expected: 0b111110001111111001101100100000110101110000000110 },
        TestCaseOneArg { arg: 0b011000111001000011101000010010000101010110001100, expected: 0b001100011010101000010010000101110000100111000110 },
        TestCaseOneArg { arg: 0b011010001101010110111101001101001101111011101011, expected: 0b110101110111101100101100101111011010101100010110 },
        TestCaseOneArg { arg: 0b011011110111011001001001101011101011111001110001, expected: 0b100011100111110101110101100100100110111011110110 },
        TestCaseOneArg { arg: 0b011111110010010110101111010000111001000100010110, expected: 0b011010001000100111000010111101011010010011111110 },
        TestCaseOneArg { arg: 0b100011100100100110111100001110110100101110100111, expected: 0b111001011101001011011100001111011001001001110001 },
        TestCaseOneArg { arg: 0b100100011000000000100110110111100101110011111110, expected: 0b011111110011101001111011011001000000000110001001 },
        TestCaseOneArg { arg: 0b100100011111111011110110000001010101010110101001, expected: 0b100101011010101010100000011011110111111110001001 },
        TestCaseOneArg { arg: 0b100110011110100011111000100011101110010110101110, expected: 0b011101011010011101110001000111110001011110011001 },
        TestCaseOneArg { arg: 0b101000010111111011000110111101110110110000001010, expected: 0b010100000011011011101111011000110111111010000101 },
        TestCaseOneArg { arg: 0b101001100110101010100011101111110111010010111100, expected: 0b001111010010111011111101110001010101011001100101 },
        TestCaseOneArg { arg: 0b101001100111011100010011111000101101101110111010, expected: 0b010111011101101101000111110010001110111001100101 },
        TestCaseOneArg { arg: 0b101001101100001101110101110010000011110101111011, expected: 0b110111101011110000010011101011101100001101100101 },
        TestCaseOneArg { arg: 0b101011101100100011010100110100001001011000000011, expected: 0b110000000110100100001011001010110001001101110101 },
        TestCaseOneArg { arg: 0b101100111100011001101110100101011011110001001110, expected: 0b011100100011110110101001011101100110001111001101 },
        TestCaseOneArg { arg: 0b101101000100000101001101101110001011110100010101, expected: 0b101010001011110100011101101100101000001000101101 },
        TestCaseOneArg { arg: 0b101101000100100011110110011000011110011000101010, expected: 0b010101000110011110000110011011110001001000101101 },
        TestCaseOneArg { arg: 0b101101100101010001110000000011011011000001100000, expected: 0b000001100000110110110000000011100010101001101101 },
        TestCaseOneArg { arg: 0b101101111000110001110010110100100111100010010001, expected: 0b100010010001111001001011010011100011000111101101 },
        TestCaseOneArg { arg: 0b101110001011111011011010110101100111001111101100, expected: 0b001101111100111001101011010110110111110100011101 },
        TestCaseOneArg { arg: 0b110000010011110000011011111010001111010111101100, expected: 0b001101111010111100010111110110000011110010000011 },
        TestCaseOneArg { arg: 0b110000011001100001000110100101000011100010011000, expected: 0b000110010001110000101001011000100001100110000011 },
        TestCaseOneArg { arg: 0b110001100111010000001010010101010101111010110101, expected: 0b101011010111101010101010010100000010111001100011 },
        TestCaseOneArg { arg: 0b110010011000111011101110000010011000000100110110, expected: 0b011011001000000110010000011101110111000110010011 },
        TestCaseOneArg { arg: 0b110010100111011010101110110000010001101101000010, expected: 0b010000101101100010000011011101010110111001010011 },
        TestCaseOneArg { arg: 0b110100101101001000110011100110001111100000011111, expected: 0b111110000001111100011001110011000100101101001011 },
        TestCaseOneArg { arg: 0b110101111110100010010001111100001111101100101111, expected: 0b111101001101111100001111100010010001011111101011 },
        TestCaseOneArg { arg: 0b110111011010010011111100110100111010000001011101, expected: 0b101110100000010111001011001111110010010110111011 },
        TestCaseOneArg { arg: 0b110111100100011100011011111100000111011111011101, expected: 0b101110111110111000001111110110001110001001111011 },
        TestCaseOneArg { arg: 0b111000001110000101110110110111001111110110100011, expected: 0b110001011011111100111011011011101000011100000111 },
        TestCaseOneArg { arg: 0b111001110000011001001011001110101101111010000101, expected: 0b101000010111101101011100110100100110000011100111 },
        TestCaseOneArg { arg: 0b111010100010100110010101000101001001100010101111, expected: 0b111101010001100100101000101010011001010001010111 },
        TestCaseOneArg { arg: 0b111011010010010100110010001111000010100101110001, expected: 0b100011101001010000111100010011001010010010110111 },
        TestCaseOneArg { arg: 0b111011100011110101000011110110010000010011011001, expected: 0b100110110010000010011011110000101011110001110111 },
        TestCaseOneArg { arg: 0b111011101110100100101110110010000100101000000000, expected: 0b000000000101001000010011011101001001011101110111 },
        TestCaseOneArg { arg: 0b111100011010011001011001110110101011010011100100, expected: 0b001001110010110101011011100110100110010110001111 },
        TestCaseOneArg { arg: 0b111101000011001110010000011100011000011110101011, expected: 0b110101011110000110001110000010011100110000101111 },
        TestCaseOneArg { arg: 0b111101010000010010101100001110000110101111100100, expected: 0b001001111101011000011100001101010010000010101111 },
        TestCaseOneArg { arg: 0b111110101101111100111001111001111000000100000000, expected: 0b000000001000000111100111100111001111101101011111 },
        TestCaseOneArg { arg: 0b111111011011000101001101101010111111110011101010, expected: 0b010101110011111111010101101100101000110110111111 },
    ];

    #[test]
    fn test_i48() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bitreverse_k_k(*case.arg), *case.expected);
        }
    }
}
