use crate::alu::bitreverse::bitreverse;
use crate::integer::u24::u24;

pub fn __llvm_bitreverse_x_x(value: u128) -> u128 {
    bitreverse::<u24>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bitreverse_x_x;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000000000111011010000101, expected: 0b101000010110111000000000 },
        TestCaseOneArg { arg: 0b000001000100000010111110, expected: 0b011111010000001000100000 },
        TestCaseOneArg { arg: 0b000001011111000100100110, expected: 0b011001001000111110100000 },
        TestCaseOneArg { arg: 0b000010010010011001100101, expected: 0b101001100110010010010000 },
        TestCaseOneArg { arg: 0b000010100011101001111100, expected: 0b001111100101110001010000 },
        TestCaseOneArg { arg: 0b000011010101011111011010, expected: 0b010110111110101010110000 },
        TestCaseOneArg { arg: 0b000100110011001101000001, expected: 0b100000101100110011001000 },
        TestCaseOneArg { arg: 0b001000000010101010010101, expected: 0b101010010101010000000100 },
        TestCaseOneArg { arg: 0b001000001010001010000000, expected: 0b000000010100010100000100 },
        TestCaseOneArg { arg: 0b001010000101010110000011, expected: 0b110000011010101000010100 },
        TestCaseOneArg { arg: 0b001011111100010101000000, expected: 0b000000101010001111110100 },
        TestCaseOneArg { arg: 0b001101010000101111010101, expected: 0b101010111101000010101100 },
        TestCaseOneArg { arg: 0b001101110100101100011101, expected: 0b101110001101001011101100 },
        TestCaseOneArg { arg: 0b001101111111010011011100, expected: 0b001110110010111111101100 },
        TestCaseOneArg { arg: 0b001111000010101101010010, expected: 0b010010101101010000111100 },
        TestCaseOneArg { arg: 0b010010001010110110100110, expected: 0b011001011011010100010010 },
        TestCaseOneArg { arg: 0b010011001110110101110101, expected: 0b101011101011011100110010 },
        TestCaseOneArg { arg: 0b010100000001110011110011, expected: 0b110011110011100000001010 },
        TestCaseOneArg { arg: 0b010100110000010000011110, expected: 0b011110000010000011001010 },
        TestCaseOneArg { arg: 0b010111111101100111000110, expected: 0b011000111001101111111010 },
        TestCaseOneArg { arg: 0b011000000101111110111011, expected: 0b110111011111101000000110 },
        TestCaseOneArg { arg: 0b011000011111100111111110, expected: 0b011111111001111110000110 },
        TestCaseOneArg { arg: 0b011011100111011001000011, expected: 0b110000100110111001110110 },
        TestCaseOneArg { arg: 0b011101010110000011100011, expected: 0b110001110000011010101110 },
        TestCaseOneArg { arg: 0b011101011000001101101010, expected: 0b010101101100000110101110 },
        TestCaseOneArg { arg: 0b011111001011010001110111, expected: 0b111011100010110100111110 },
        TestCaseOneArg { arg: 0b011111100111010100010000, expected: 0b000010001010111001111110 },
        TestCaseOneArg { arg: 0b100001111000111111100101, expected: 0b101001111111000111100001 },
        TestCaseOneArg { arg: 0b100010101000111100000011, expected: 0b110000001111000101010001 },
        TestCaseOneArg { arg: 0b100011110011011000110111, expected: 0b111011000110110011110001 },
        TestCaseOneArg { arg: 0b100100101101001001001100, expected: 0b001100100100101101001001 },
        TestCaseOneArg { arg: 0b100101001000101111111010, expected: 0b010111111101000100101001 },
        TestCaseOneArg { arg: 0b100101011111101111111110, expected: 0b011111111101111110101001 },
        TestCaseOneArg { arg: 0b101101000111100110100010, expected: 0b010001011001111000101101 },
        TestCaseOneArg { arg: 0b101101011000011010101000, expected: 0b000101010110000110101101 },
        TestCaseOneArg { arg: 0b101110100001000001011001, expected: 0b100110100000100001011101 },
        TestCaseOneArg { arg: 0b101111110011010110100011, expected: 0b110001011010110011111101 },
        TestCaseOneArg { arg: 0b101111110110010010010110, expected: 0b011010010010011011111101 },
        TestCaseOneArg { arg: 0b101111110111110000100110, expected: 0b011001000011111011111101 },
        TestCaseOneArg { arg: 0b110001001100011100010101, expected: 0b101010001110001100100011 },
        TestCaseOneArg { arg: 0b110001100010001011110001, expected: 0b100011110100010001100011 },
        TestCaseOneArg { arg: 0b110010101000110111011001, expected: 0b100110111011000101010011 },
        TestCaseOneArg { arg: 0b110011101011010001011010, expected: 0b010110100010110101110011 },
        TestCaseOneArg { arg: 0b110110000101001110011011, expected: 0b110110011100101000011011 },
        TestCaseOneArg { arg: 0b110110101100010101000000, expected: 0b000000101010001101011011 },
        TestCaseOneArg { arg: 0b110110110011101010011101, expected: 0b101110010101110011011011 },
        TestCaseOneArg { arg: 0b111000101100000011010111, expected: 0b111010110000001101000111 },
        TestCaseOneArg { arg: 0b111001000011001011001001, expected: 0b100100110100110000100111 },
        TestCaseOneArg { arg: 0b111001011111011001001100, expected: 0b001100100110111110100111 },
        TestCaseOneArg { arg: 0b111001110101010110100000, expected: 0b000001011010101011100111 },
        TestCaseOneArg { arg: 0b111001111000100110111111, expected: 0b111111011001000111100111 },
        TestCaseOneArg { arg: 0b111010001010101010010111, expected: 0b111010010101010100010111 },
        TestCaseOneArg { arg: 0b111011000111001011011101, expected: 0b101110110100111000110111 },
        TestCaseOneArg { arg: 0b111011110010110010101101, expected: 0b101101010011010011110111 },
        TestCaseOneArg { arg: 0b111100000011111100111010, expected: 0b010111001111110000001111 },
        TestCaseOneArg { arg: 0b111100110101011110011000, expected: 0b000110011110101011001111 },
        TestCaseOneArg { arg: 0b111101000110111110100101, expected: 0b101001011111011000101111 },
        TestCaseOneArg { arg: 0b111101010001111010000101, expected: 0b101000010111100010101111 },
        TestCaseOneArg { arg: 0b111101110110011110110000, expected: 0b000011011110011011101111 },
        TestCaseOneArg { arg: 0b111111100010110000110001, expected: 0b100011000011010001111111 },
    ];
    #[test]
    fn test_i24() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bitreverse_x_x(*case.arg), *case.expected);
        }
    }
}
