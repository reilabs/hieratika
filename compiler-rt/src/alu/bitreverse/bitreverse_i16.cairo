use crate::alu::bitreverse::bitreverse;

pub fn __llvm_bitreverse_i16(value: u128) -> u128 {
    bitreverse::<u16>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bitreverse_i16;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 128] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b0000100101011000, expected: 0b0001101010010000 },
        TestCaseOneArg { arg: 0b0100010100111110, expected: 0b0111110010100010 },
        TestCaseOneArg { arg: 0b0100101101011001, expected: 0b1001101011010010 },
        TestCaseOneArg { arg: 0b0101110101010001, expected: 0b1000101010111010 },
        TestCaseOneArg { arg: 0b1100000101110000, expected: 0b0000111010000011 },
        TestCaseOneArg { arg: 0b1010001111111001, expected: 0b1001111111000101 },
        TestCaseOneArg { arg: 0b0010011011001110, expected: 0b0111001101100100 },
        TestCaseOneArg { arg: 0b1000010101011100, expected: 0b0011101010100001 },
        TestCaseOneArg { arg: 0b1100100011010011, expected: 0b1100101100010011 },
        TestCaseOneArg { arg: 0b1100011000110100, expected: 0b0010110001100011 },
        TestCaseOneArg { arg: 0b0110111100000000, expected: 0b0000000011110110 },
        TestCaseOneArg { arg: 0b0100101111011010, expected: 0b0101101111010010 },
        TestCaseOneArg { arg: 0b0000111001010011, expected: 0b1100101001110000 },
        TestCaseOneArg { arg: 0b1011110110001100, expected: 0b0011000110111101 },
        TestCaseOneArg { arg: 0b0001011000100110, expected: 0b0110010001101000 },
        TestCaseOneArg { arg: 0b0100000101101011, expected: 0b1101011010000010 },
        TestCaseOneArg { arg: 0b1100110110111001, expected: 0b1001110110110011 },
        TestCaseOneArg { arg: 0b1001100100011100, expected: 0b0011100010011001 },
        TestCaseOneArg { arg: 0b0010100110111101, expected: 0b1011110110010100 },
        TestCaseOneArg { arg: 0b1111000100000101, expected: 0b1010000010001111 },
        TestCaseOneArg { arg: 0b0111100101011101, expected: 0b1011101010011110 },
        TestCaseOneArg { arg: 0b1010101010111011, expected: 0b1101110101010101 },
        TestCaseOneArg { arg: 0b1000110010100100, expected: 0b0010010100110001 },
        TestCaseOneArg { arg: 0b0001001000111110, expected: 0b0111110001001000 },
        TestCaseOneArg { arg: 0b1001111100000101, expected: 0b1010000011111001 },
        TestCaseOneArg { arg: 0b1000010011010100, expected: 0b0010101100100001 },
        TestCaseOneArg { arg: 0b1100011001011001, expected: 0b1001101001100011 },
        TestCaseOneArg { arg: 0b0100111110011110, expected: 0b0111100111110010 },
        TestCaseOneArg { arg: 0b1100000110111101, expected: 0b1011110110000011 },
        TestCaseOneArg { arg: 0b0111001011110110, expected: 0b0110111101001110 },
        TestCaseOneArg { arg: 0b0010111111011001, expected: 0b1001101111110100 },
        TestCaseOneArg { arg: 0b1000100111101111, expected: 0b1111011110010001 },
        TestCaseOneArg { arg: 0b1101011000010111, expected: 0b1110100001101011 },
        TestCaseOneArg { arg: 0b1110001111001011, expected: 0b1101001111000111 },
        TestCaseOneArg { arg: 0b0111110011110001, expected: 0b1000111100111110 },
        TestCaseOneArg { arg: 0b1000000100111101, expected: 0b1011110010000001 },
        TestCaseOneArg { arg: 0b1100100111000101, expected: 0b1010001110010011 },
        TestCaseOneArg { arg: 0b1001110111000100, expected: 0b0010001110111001 },
        TestCaseOneArg { arg: 0b0101011100111010, expected: 0b0101110011101010 },
        TestCaseOneArg { arg: 0b1100001011101010, expected: 0b0101011101000011 },
        TestCaseOneArg { arg: 0b1000010010100001, expected: 0b1000010100100001 },
        TestCaseOneArg { arg: 0b0000110000000111, expected: 0b1110000000110000 },
        TestCaseOneArg { arg: 0b0001011111110100, expected: 0b0010111111101000 },
        TestCaseOneArg { arg: 0b0011010010000010, expected: 0b0100000100101100 },
        TestCaseOneArg { arg: 0b1110101000110010, expected: 0b0100110001010111 },
        TestCaseOneArg { arg: 0b1100000010111000, expected: 0b0001110100000011 },
        TestCaseOneArg { arg: 0b1110101000000101, expected: 0b1010000001010111 },
        TestCaseOneArg { arg: 0b0110101101111000, expected: 0b0001111011010110 },
        TestCaseOneArg { arg: 0b1001110000110110, expected: 0b0110110000111001 },
        TestCaseOneArg { arg: 0b1101001111001000, expected: 0b0001001111001011 },
        TestCaseOneArg { arg: 0b1111011101111010, expected: 0b0101111011101111 },
        TestCaseOneArg { arg: 0b1110000001000110, expected: 0b0110001000000111 },
        TestCaseOneArg { arg: 0b1110110110110010, expected: 0b0100110110110111 },
        TestCaseOneArg { arg: 0b0100100011100111, expected: 0b1110011100010010 },
        TestCaseOneArg { arg: 0b1101111011101011, expected: 0b1101011101111011 },
        TestCaseOneArg { arg: 0b0001100011111000, expected: 0b0001111100011000 },
        TestCaseOneArg { arg: 0b0101011110011110, expected: 0b0111100111101010 },
        TestCaseOneArg { arg: 0b1010100010101110, expected: 0b0111010100010101 },
        TestCaseOneArg { arg: 0b1100101000110100, expected: 0b0010110001010011 },
        TestCaseOneArg { arg: 0b1100110110010011, expected: 0b1100100110110011 },
        TestCaseOneArg { arg: 0b1111100110000100, expected: 0b0010000110011111 },
        TestCaseOneArg { arg: 0b1101010110101101, expected: 0b1011010110101011 },
        TestCaseOneArg { arg: 0b0101111001110011, expected: 0b1100111001111010 },
        TestCaseOneArg { arg: 0b0011000000011111, expected: 0b1111100000001100 },
        TestCaseOneArg { arg: 0b1100011101101101, expected: 0b1011011011100011 },
        TestCaseOneArg { arg: 0b0001101101011110, expected: 0b0111101011011000 },
        TestCaseOneArg { arg: 0b0011110100110111, expected: 0b1110110010111100 },
        TestCaseOneArg { arg: 0b1000111011011110, expected: 0b0111101101110001 },
        TestCaseOneArg { arg: 0b1101100001010110, expected: 0b0110101000011011 },
        TestCaseOneArg { arg: 0b1000011010101111, expected: 0b1111010101100001 },
        TestCaseOneArg { arg: 0b1101011001110110, expected: 0b0110111001101011 },
        TestCaseOneArg { arg: 0b1010010101100110, expected: 0b0110011010100101 },
        TestCaseOneArg { arg: 0b0110110000110100, expected: 0b0010110000110110 },
        TestCaseOneArg { arg: 0b0111111110001010, expected: 0b0101000111111110 },
        TestCaseOneArg { arg: 0b1001101110011110, expected: 0b0111100111011001 },
        TestCaseOneArg { arg: 0b1001111111001110, expected: 0b0111001111111001 },
        TestCaseOneArg { arg: 0b1100000000111100, expected: 0b0011110000000011 },
        TestCaseOneArg { arg: 0b0010011100001110, expected: 0b0111000011100100 },
        TestCaseOneArg { arg: 0b1001101010110001, expected: 0b1000110101011001 },
        TestCaseOneArg { arg: 0b1110010101010100, expected: 0b0010101010100111 },
        TestCaseOneArg { arg: 0b0000001010110100, expected: 0b0010110101000000 },
        TestCaseOneArg { arg: 0b1011101100010100, expected: 0b0010100011011101 },
        TestCaseOneArg { arg: 0b1011010001010110, expected: 0b0110101000101101 },
        TestCaseOneArg { arg: 0b0000111011001010, expected: 0b0101001101110000 },
        TestCaseOneArg { arg: 0b1001000110100100, expected: 0b0010010110001001 },
        TestCaseOneArg { arg: 0b1101100011001111, expected: 0b1111001100011011 },
        TestCaseOneArg { arg: 0b0110000010010000, expected: 0b0000100100000110 },
        TestCaseOneArg { arg: 0b0100100001000000, expected: 0b0000001000010010 },
        TestCaseOneArg { arg: 0b1101110111011011, expected: 0b1101101110111011 },
        TestCaseOneArg { arg: 0b0100010010100000, expected: 0b0000010100100010 },
        TestCaseOneArg { arg: 0b0111001110111110, expected: 0b0111110111001110 },
        TestCaseOneArg { arg: 0b1000000100010011, expected: 0b1100100010000001 },
        TestCaseOneArg { arg: 0b1110100000111001, expected: 0b1001110000010111 },
        TestCaseOneArg { arg: 0b0010100100001101, expected: 0b1011000010010100 },
        TestCaseOneArg { arg: 0b0011110010011111, expected: 0b1111100100111100 },
        TestCaseOneArg { arg: 0b1011000110101110, expected: 0b0111010110001101 },
        TestCaseOneArg { arg: 0b0101011110101100, expected: 0b0011010111101010 },
        TestCaseOneArg { arg: 0b1001101011111000, expected: 0b0001111101011001 },
        TestCaseOneArg { arg: 0b0101101100100110, expected: 0b0110010011011010 },
        TestCaseOneArg { arg: 0b1110000001001000, expected: 0b0001001000000111 },
        TestCaseOneArg { arg: 0b0101001110111001, expected: 0b1001110111001010 },
        TestCaseOneArg { arg: 0b1110011000101001, expected: 0b1001010001100111 },
        TestCaseOneArg { arg: 0b0000011001101111, expected: 0b1111011001100000 },
        TestCaseOneArg { arg: 0b0111000111100011, expected: 0b1100011110001110 },
        TestCaseOneArg { arg: 0b0111011110101011, expected: 0b1101010111101110 },
        TestCaseOneArg { arg: 0b0110010101010110, expected: 0b0110101010100110 },
        TestCaseOneArg { arg: 0b1000010100000010, expected: 0b0100000010100001 },
        TestCaseOneArg { arg: 0b0100001100110001, expected: 0b1000110011000010 },
        TestCaseOneArg { arg: 0b0100110010001011, expected: 0b1101000100110010 },
        TestCaseOneArg { arg: 0b1111001000011010, expected: 0b0101100001001111 },
        TestCaseOneArg { arg: 0b0011000110011110, expected: 0b0111100110001100 },
        TestCaseOneArg { arg: 0b1011010101000010, expected: 0b0100001010101101 },
        TestCaseOneArg { arg: 0b1010000000001011, expected: 0b1101000000000101 },
        TestCaseOneArg { arg: 0b0101001100100101, expected: 0b1010010011001010 },
        TestCaseOneArg { arg: 0b1010110000011101, expected: 0b1011100000110101 },
        TestCaseOneArg { arg: 0b0101111110000000, expected: 0b0000000111111010 },
        TestCaseOneArg { arg: 0b1100101100001100, expected: 0b0011000011010011 },
        TestCaseOneArg { arg: 0b0010100111111010, expected: 0b0101111110010100 },
        TestCaseOneArg { arg: 0b0111101100001011, expected: 0b1101000011011110 },
        TestCaseOneArg { arg: 0b1100110100000010, expected: 0b0100000010110011 },
        TestCaseOneArg { arg: 0b0101001000101111, expected: 0b1111010001001010 },
        TestCaseOneArg { arg: 0b0111011100110111, expected: 0b1110110011101110 },
        TestCaseOneArg { arg: 0b1101111111010001, expected: 0b1000101111111011 },
        TestCaseOneArg { arg: 0b0110101111000010, expected: 0b0100001111010110 },
        TestCaseOneArg { arg: 0b1001000100001001, expected: 0b1001000010001001 },
        TestCaseOneArg { arg: 0b1011001001101111, expected: 0b1111011001001101 },
        TestCaseOneArg { arg: 0b1110000000111001, expected: 0b1001110000000111 },
        TestCaseOneArg { arg: 0b1011110111111111, expected: 0b1111111110111101 },
    ];

    #[test]
    fn test_i16() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bitreverse_i16(*case.arg), *case.expected);
        }
    }
}
