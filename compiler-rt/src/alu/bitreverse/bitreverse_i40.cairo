use crate::alu::bitreverse::bitreverse;
use crate::integer::u40::u40;

pub fn __llvm_bitreverse_n_n(value: u128) -> u128 {
    bitreverse::<u40>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_bitreverse_n_n;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 30] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b0001011111010010110000010011111001100010, expected: 0b0100011001111100100000110100101111101000 },
        TestCaseOneArg { arg: 0b0010000010111101001011011010111000000001, expected: 0b1000000001110101101101001011110100000100 },
        TestCaseOneArg { arg: 0b0010100001011111011111111001001001100110, expected: 0b0110011001001001111111101111101000010100 },
        TestCaseOneArg { arg: 0b0011010010110010000110000000100000110001, expected: 0b1000110000010000000110000100110100101100 },
        TestCaseOneArg { arg: 0b0011101011001110010110010110001101011011, expected: 0b1101101011000110100110100111001101011100 },
        TestCaseOneArg { arg: 0b0011101100011111001111101110111111001000, expected: 0b0001001111110111011111001111100011011100 },
        TestCaseOneArg { arg: 0b0011101100110011010111110001111110000110, expected: 0b0110000111111000111110101100110011011100 },
        TestCaseOneArg { arg: 0b0100000111011110101011110110011110011111, expected: 0b1111100111100110111101010111101110000010 },
        TestCaseOneArg { arg: 0b0100010001100101001001110110111101011111, expected: 0b1111101011110110111001001010011000100010 },
        TestCaseOneArg { arg: 0b0101001101101100001000110111111000111110, expected: 0b0111110001111110110001000011011011001010 },
        TestCaseOneArg { arg: 0b0101111011101101100011011101001100001001, expected: 0b1001000011001011101100011011011101111010 },
        TestCaseOneArg { arg: 0b0110011101111001100011111111000010011111, expected: 0b1111100100001111111100011001111011100110 },
        TestCaseOneArg { arg: 0b0111000110111011100100110111011100110101, expected: 0b1010110011101110110010011101110110001110 },
        TestCaseOneArg { arg: 0b0111001000101111011100110100000111011011, expected: 0b1101101110000010110011101111010001001110 },
        TestCaseOneArg { arg: 0b0111111011101011110101110011111110010011, expected: 0b1100100111111100111010111101011101111110 },
        TestCaseOneArg { arg: 0b1000000010110110011001001100010111011111, expected: 0b1111101110100011001001100110110100000001 },
        TestCaseOneArg { arg: 0b1000011111100110101011111011000010110000, expected: 0b0000110100001101111101010110011111100001 },
        TestCaseOneArg { arg: 0b1000111111110001101101101010101110000010, expected: 0b0100000111010101011011011000111111110001 },
        TestCaseOneArg { arg: 0b1001010111111101010100010110000101100000, expected: 0b0000011010000110100010101011111110101001 },
        TestCaseOneArg { arg: 0b1001101110100101110101111001000100100001, expected: 0b1000010010001001111010111010010111011001 },
        TestCaseOneArg { arg: 0b1010001111100000001000100101101001010010, expected: 0b0100101001011010010001000000011111000101 },
        TestCaseOneArg { arg: 0b1010001111111001000000100101011101101000, expected: 0b0001011011101010010000001001111111000101 },
        TestCaseOneArg { arg: 0b1010100010100110010100111011000010011000, expected: 0b0001100100001101110010100110010100010101 },
        TestCaseOneArg { arg: 0b1011111100110000000011100011011101100011, expected: 0b1100011011101100011100000000110011111101 },
        TestCaseOneArg { arg: 0b1100001001100101111001001000000101110101, expected: 0b1010111010000001001001111010011001000011 },
        TestCaseOneArg { arg: 0b1100010001010011100101001111101110101101, expected: 0b1011010111011111001010011100101000100011 },
        TestCaseOneArg { arg: 0b1101011011011000101000000001000000011010, expected: 0b0101100000001000000001010001101101101011 },
        TestCaseOneArg { arg: 0b1101111000100101001100010000100000000011, expected: 0b1100000000010000100011001010010001111011 },
        TestCaseOneArg { arg: 0b1110011110100011101010001101110011000111, expected: 0b1110001100111011000101011100010111100111 },
        TestCaseOneArg { arg: 0b1111111000111000011010110101111101000100, expected: 0b0010001011111010110101100001110001111111 },
    ];

    #[test]
    fn test_i40() {
        for case in test_cases.span() {
            assert_eq!(__llvm_bitreverse_n_n(*case.arg), *case.expected);
        }
    }
}
