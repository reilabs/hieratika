use crate::rtstate::RTState;
use crate::alu::ctlz::ctlz;

pub fn __llvm_ctlz_b_c_b(ref state: RTState, value: u128, _is_zero_poison: u128) -> u128 {
    ctlz::<u8>(value)
}

#[cfg(test)]
mod tests {
    use crate::rtstate::RTStateOps;
    use super::__llvm_ctlz_b_c_b;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 256] = [
        // All possible 8-bit patterns
        TestCaseOneArg { arg: 0b00000000, expected: 8 },
        TestCaseOneArg { arg: 0b00000001, expected: 7 },
        TestCaseOneArg { arg: 0b00000010, expected: 6 },
        TestCaseOneArg { arg: 0b00000011, expected: 6 },
        TestCaseOneArg { arg: 0b00000100, expected: 5 },
        TestCaseOneArg { arg: 0b00000101, expected: 5 },
        TestCaseOneArg { arg: 0b00000110, expected: 5 },
        TestCaseOneArg { arg: 0b00000111, expected: 5 },
        TestCaseOneArg { arg: 0b00001000, expected: 4 },
        TestCaseOneArg { arg: 0b00001001, expected: 4 },
        TestCaseOneArg { arg: 0b00001010, expected: 4 },
        TestCaseOneArg { arg: 0b00001011, expected: 4 },
        TestCaseOneArg { arg: 0b00001100, expected: 4 },
        TestCaseOneArg { arg: 0b00001101, expected: 4 },
        TestCaseOneArg { arg: 0b00001110, expected: 4 },
        TestCaseOneArg { arg: 0b00001111, expected: 4 },
        TestCaseOneArg { arg: 0b00010000, expected: 3 },
        TestCaseOneArg { arg: 0b00010001, expected: 3 },
        TestCaseOneArg { arg: 0b00010010, expected: 3 },
        TestCaseOneArg { arg: 0b00010011, expected: 3 },
        TestCaseOneArg { arg: 0b00010100, expected: 3 },
        TestCaseOneArg { arg: 0b00010101, expected: 3 },
        TestCaseOneArg { arg: 0b00010110, expected: 3 },
        TestCaseOneArg { arg: 0b00010111, expected: 3 },
        TestCaseOneArg { arg: 0b00011000, expected: 3 },
        TestCaseOneArg { arg: 0b00011001, expected: 3 },
        TestCaseOneArg { arg: 0b00011010, expected: 3 },
        TestCaseOneArg { arg: 0b00011011, expected: 3 },
        TestCaseOneArg { arg: 0b00011100, expected: 3 },
        TestCaseOneArg { arg: 0b00011101, expected: 3 },
        TestCaseOneArg { arg: 0b00011110, expected: 3 },
        TestCaseOneArg { arg: 0b00011111, expected: 3 },
        TestCaseOneArg { arg: 0b00100000, expected: 2 },
        TestCaseOneArg { arg: 0b00100001, expected: 2 },
        TestCaseOneArg { arg: 0b00100010, expected: 2 },
        TestCaseOneArg { arg: 0b00100011, expected: 2 },
        TestCaseOneArg { arg: 0b00100100, expected: 2 },
        TestCaseOneArg { arg: 0b00100101, expected: 2 },
        TestCaseOneArg { arg: 0b00100110, expected: 2 },
        TestCaseOneArg { arg: 0b00100111, expected: 2 },
        TestCaseOneArg { arg: 0b00101000, expected: 2 },
        TestCaseOneArg { arg: 0b00101001, expected: 2 },
        TestCaseOneArg { arg: 0b00101010, expected: 2 },
        TestCaseOneArg { arg: 0b00101011, expected: 2 },
        TestCaseOneArg { arg: 0b00101100, expected: 2 },
        TestCaseOneArg { arg: 0b00101101, expected: 2 },
        TestCaseOneArg { arg: 0b00101110, expected: 2 },
        TestCaseOneArg { arg: 0b00101111, expected: 2 },
        TestCaseOneArg { arg: 0b00110000, expected: 2 },
        TestCaseOneArg { arg: 0b00110001, expected: 2 },
        TestCaseOneArg { arg: 0b00110010, expected: 2 },
        TestCaseOneArg { arg: 0b00110011, expected: 2 },
        TestCaseOneArg { arg: 0b00110100, expected: 2 },
        TestCaseOneArg { arg: 0b00110101, expected: 2 },
        TestCaseOneArg { arg: 0b00110110, expected: 2 },
        TestCaseOneArg { arg: 0b00110111, expected: 2 },
        TestCaseOneArg { arg: 0b00111000, expected: 2 },
        TestCaseOneArg { arg: 0b00111001, expected: 2 },
        TestCaseOneArg { arg: 0b00111010, expected: 2 },
        TestCaseOneArg { arg: 0b00111011, expected: 2 },
        TestCaseOneArg { arg: 0b00111100, expected: 2 },
        TestCaseOneArg { arg: 0b00111101, expected: 2 },
        TestCaseOneArg { arg: 0b00111110, expected: 2 },
        TestCaseOneArg { arg: 0b00111111, expected: 2 },
        TestCaseOneArg { arg: 0b01000000, expected: 1 },
        TestCaseOneArg { arg: 0b01000001, expected: 1 },
        TestCaseOneArg { arg: 0b01000010, expected: 1 },
        TestCaseOneArg { arg: 0b01000011, expected: 1 },
        TestCaseOneArg { arg: 0b01000100, expected: 1 },
        TestCaseOneArg { arg: 0b01000101, expected: 1 },
        TestCaseOneArg { arg: 0b01000110, expected: 1 },
        TestCaseOneArg { arg: 0b01000111, expected: 1 },
        TestCaseOneArg { arg: 0b01001000, expected: 1 },
        TestCaseOneArg { arg: 0b01001001, expected: 1 },
        TestCaseOneArg { arg: 0b01001010, expected: 1 },
        TestCaseOneArg { arg: 0b01001011, expected: 1 },
        TestCaseOneArg { arg: 0b01001100, expected: 1 },
        TestCaseOneArg { arg: 0b01001101, expected: 1 },
        TestCaseOneArg { arg: 0b01001110, expected: 1 },
        TestCaseOneArg { arg: 0b01001111, expected: 1 },
        TestCaseOneArg { arg: 0b01010000, expected: 1 },
        TestCaseOneArg { arg: 0b01010001, expected: 1 },
        TestCaseOneArg { arg: 0b01010010, expected: 1 },
        TestCaseOneArg { arg: 0b01010011, expected: 1 },
        TestCaseOneArg { arg: 0b01010100, expected: 1 },
        TestCaseOneArg { arg: 0b01010101, expected: 1 },
        TestCaseOneArg { arg: 0b01010110, expected: 1 },
        TestCaseOneArg { arg: 0b01010111, expected: 1 },
        TestCaseOneArg { arg: 0b01011000, expected: 1 },
        TestCaseOneArg { arg: 0b01011001, expected: 1 },
        TestCaseOneArg { arg: 0b01011010, expected: 1 },
        TestCaseOneArg { arg: 0b01011011, expected: 1 },
        TestCaseOneArg { arg: 0b01011100, expected: 1 },
        TestCaseOneArg { arg: 0b01011101, expected: 1 },
        TestCaseOneArg { arg: 0b01011110, expected: 1 },
        TestCaseOneArg { arg: 0b01011111, expected: 1 },
        TestCaseOneArg { arg: 0b01100000, expected: 1 },
        TestCaseOneArg { arg: 0b01100001, expected: 1 },
        TestCaseOneArg { arg: 0b01100010, expected: 1 },
        TestCaseOneArg { arg: 0b01100011, expected: 1 },
        TestCaseOneArg { arg: 0b01100100, expected: 1 },
        TestCaseOneArg { arg: 0b01100101, expected: 1 },
        TestCaseOneArg { arg: 0b01100110, expected: 1 },
        TestCaseOneArg { arg: 0b01100111, expected: 1 },
        TestCaseOneArg { arg: 0b01101000, expected: 1 },
        TestCaseOneArg { arg: 0b01101001, expected: 1 },
        TestCaseOneArg { arg: 0b01101010, expected: 1 },
        TestCaseOneArg { arg: 0b01101011, expected: 1 },
        TestCaseOneArg { arg: 0b01101100, expected: 1 },
        TestCaseOneArg { arg: 0b01101101, expected: 1 },
        TestCaseOneArg { arg: 0b01101110, expected: 1 },
        TestCaseOneArg { arg: 0b01101111, expected: 1 },
        TestCaseOneArg { arg: 0b01110000, expected: 1 },
        TestCaseOneArg { arg: 0b01110001, expected: 1 },
        TestCaseOneArg { arg: 0b01110010, expected: 1 },
        TestCaseOneArg { arg: 0b01110011, expected: 1 },
        TestCaseOneArg { arg: 0b01110100, expected: 1 },
        TestCaseOneArg { arg: 0b01110101, expected: 1 },
        TestCaseOneArg { arg: 0b01110110, expected: 1 },
        TestCaseOneArg { arg: 0b01110111, expected: 1 },
        TestCaseOneArg { arg: 0b01111000, expected: 1 },
        TestCaseOneArg { arg: 0b01111001, expected: 1 },
        TestCaseOneArg { arg: 0b01111010, expected: 1 },
        TestCaseOneArg { arg: 0b01111011, expected: 1 },
        TestCaseOneArg { arg: 0b01111100, expected: 1 },
        TestCaseOneArg { arg: 0b01111101, expected: 1 },
        TestCaseOneArg { arg: 0b01111110, expected: 1 },
        TestCaseOneArg { arg: 0b01111111, expected: 1 },
        TestCaseOneArg { arg: 0b10000000, expected: 0 },
        TestCaseOneArg { arg: 0b10000001, expected: 0 },
        TestCaseOneArg { arg: 0b10000010, expected: 0 },
        TestCaseOneArg { arg: 0b10000011, expected: 0 },
        TestCaseOneArg { arg: 0b10000100, expected: 0 },
        TestCaseOneArg { arg: 0b10000101, expected: 0 },
        TestCaseOneArg { arg: 0b10000110, expected: 0 },
        TestCaseOneArg { arg: 0b10000111, expected: 0 },
        TestCaseOneArg { arg: 0b10001000, expected: 0 },
        TestCaseOneArg { arg: 0b10001001, expected: 0 },
        TestCaseOneArg { arg: 0b10001010, expected: 0 },
        TestCaseOneArg { arg: 0b10001011, expected: 0 },
        TestCaseOneArg { arg: 0b10001100, expected: 0 },
        TestCaseOneArg { arg: 0b10001101, expected: 0 },
        TestCaseOneArg { arg: 0b10001110, expected: 0 },
        TestCaseOneArg { arg: 0b10001111, expected: 0 },
        TestCaseOneArg { arg: 0b10010000, expected: 0 },
        TestCaseOneArg { arg: 0b10010001, expected: 0 },
        TestCaseOneArg { arg: 0b10010010, expected: 0 },
        TestCaseOneArg { arg: 0b10010011, expected: 0 },
        TestCaseOneArg { arg: 0b10010100, expected: 0 },
        TestCaseOneArg { arg: 0b10010101, expected: 0 },
        TestCaseOneArg { arg: 0b10010110, expected: 0 },
        TestCaseOneArg { arg: 0b10010111, expected: 0 },
        TestCaseOneArg { arg: 0b10011000, expected: 0 },
        TestCaseOneArg { arg: 0b10011001, expected: 0 },
        TestCaseOneArg { arg: 0b10011010, expected: 0 },
        TestCaseOneArg { arg: 0b10011011, expected: 0 },
        TestCaseOneArg { arg: 0b10011100, expected: 0 },
        TestCaseOneArg { arg: 0b10011101, expected: 0 },
        TestCaseOneArg { arg: 0b10011110, expected: 0 },
        TestCaseOneArg { arg: 0b10011111, expected: 0 },
        TestCaseOneArg { arg: 0b10100000, expected: 0 },
        TestCaseOneArg { arg: 0b10100001, expected: 0 },
        TestCaseOneArg { arg: 0b10100010, expected: 0 },
        TestCaseOneArg { arg: 0b10100011, expected: 0 },
        TestCaseOneArg { arg: 0b10100100, expected: 0 },
        TestCaseOneArg { arg: 0b10100101, expected: 0 },
        TestCaseOneArg { arg: 0b10100110, expected: 0 },
        TestCaseOneArg { arg: 0b10100111, expected: 0 },
        TestCaseOneArg { arg: 0b10101000, expected: 0 },
        TestCaseOneArg { arg: 0b10101001, expected: 0 },
        TestCaseOneArg { arg: 0b10101010, expected: 0 },
        TestCaseOneArg { arg: 0b10101011, expected: 0 },
        TestCaseOneArg { arg: 0b10101100, expected: 0 },
        TestCaseOneArg { arg: 0b10101101, expected: 0 },
        TestCaseOneArg { arg: 0b10101110, expected: 0 },
        TestCaseOneArg { arg: 0b10101111, expected: 0 },
        TestCaseOneArg { arg: 0b10110000, expected: 0 },
        TestCaseOneArg { arg: 0b10110001, expected: 0 },
        TestCaseOneArg { arg: 0b10110010, expected: 0 },
        TestCaseOneArg { arg: 0b10110011, expected: 0 },
        TestCaseOneArg { arg: 0b10110100, expected: 0 },
        TestCaseOneArg { arg: 0b10110101, expected: 0 },
        TestCaseOneArg { arg: 0b10110110, expected: 0 },
        TestCaseOneArg { arg: 0b10110111, expected: 0 },
        TestCaseOneArg { arg: 0b10111000, expected: 0 },
        TestCaseOneArg { arg: 0b10111001, expected: 0 },
        TestCaseOneArg { arg: 0b10111010, expected: 0 },
        TestCaseOneArg { arg: 0b10111011, expected: 0 },
        TestCaseOneArg { arg: 0b10111100, expected: 0 },
        TestCaseOneArg { arg: 0b10111101, expected: 0 },
        TestCaseOneArg { arg: 0b10111110, expected: 0 },
        TestCaseOneArg { arg: 0b10111111, expected: 0 },
        TestCaseOneArg { arg: 0b11000000, expected: 0 },
        TestCaseOneArg { arg: 0b11000001, expected: 0 },
        TestCaseOneArg { arg: 0b11000010, expected: 0 },
        TestCaseOneArg { arg: 0b11000011, expected: 0 },
        TestCaseOneArg { arg: 0b11000100, expected: 0 },
        TestCaseOneArg { arg: 0b11000101, expected: 0 },
        TestCaseOneArg { arg: 0b11000110, expected: 0 },
        TestCaseOneArg { arg: 0b11000111, expected: 0 },
        TestCaseOneArg { arg: 0b11001000, expected: 0 },
        TestCaseOneArg { arg: 0b11001001, expected: 0 },
        TestCaseOneArg { arg: 0b11001010, expected: 0 },
        TestCaseOneArg { arg: 0b11001011, expected: 0 },
        TestCaseOneArg { arg: 0b11001100, expected: 0 },
        TestCaseOneArg { arg: 0b11001101, expected: 0 },
        TestCaseOneArg { arg: 0b11001110, expected: 0 },
        TestCaseOneArg { arg: 0b11001111, expected: 0 },
        TestCaseOneArg { arg: 0b11010000, expected: 0 },
        TestCaseOneArg { arg: 0b11010001, expected: 0 },
        TestCaseOneArg { arg: 0b11010010, expected: 0 },
        TestCaseOneArg { arg: 0b11010011, expected: 0 },
        TestCaseOneArg { arg: 0b11010100, expected: 0 },
        TestCaseOneArg { arg: 0b11010101, expected: 0 },
        TestCaseOneArg { arg: 0b11010110, expected: 0 },
        TestCaseOneArg { arg: 0b11010111, expected: 0 },
        TestCaseOneArg { arg: 0b11011000, expected: 0 },
        TestCaseOneArg { arg: 0b11011001, expected: 0 },
        TestCaseOneArg { arg: 0b11011010, expected: 0 },
        TestCaseOneArg { arg: 0b11011011, expected: 0 },
        TestCaseOneArg { arg: 0b11011100, expected: 0 },
        TestCaseOneArg { arg: 0b11011101, expected: 0 },
        TestCaseOneArg { arg: 0b11011110, expected: 0 },
        TestCaseOneArg { arg: 0b11011111, expected: 0 },
        TestCaseOneArg { arg: 0b11100000, expected: 0 },
        TestCaseOneArg { arg: 0b11100001, expected: 0 },
        TestCaseOneArg { arg: 0b11100010, expected: 0 },
        TestCaseOneArg { arg: 0b11100011, expected: 0 },
        TestCaseOneArg { arg: 0b11100100, expected: 0 },
        TestCaseOneArg { arg: 0b11100101, expected: 0 },
        TestCaseOneArg { arg: 0b11100110, expected: 0 },
        TestCaseOneArg { arg: 0b11100111, expected: 0 },
        TestCaseOneArg { arg: 0b11101000, expected: 0 },
        TestCaseOneArg { arg: 0b11101001, expected: 0 },
        TestCaseOneArg { arg: 0b11101010, expected: 0 },
        TestCaseOneArg { arg: 0b11101011, expected: 0 },
        TestCaseOneArg { arg: 0b11101100, expected: 0 },
        TestCaseOneArg { arg: 0b11101101, expected: 0 },
        TestCaseOneArg { arg: 0b11101110, expected: 0 },
        TestCaseOneArg { arg: 0b11101111, expected: 0 },
        TestCaseOneArg { arg: 0b11110000, expected: 0 },
        TestCaseOneArg { arg: 0b11110001, expected: 0 },
        TestCaseOneArg { arg: 0b11110010, expected: 0 },
        TestCaseOneArg { arg: 0b11110011, expected: 0 },
        TestCaseOneArg { arg: 0b11110100, expected: 0 },
        TestCaseOneArg { arg: 0b11110101, expected: 0 },
        TestCaseOneArg { arg: 0b11110110, expected: 0 },
        TestCaseOneArg { arg: 0b11110111, expected: 0 },
        TestCaseOneArg { arg: 0b11111000, expected: 0 },
        TestCaseOneArg { arg: 0b11111001, expected: 0 },
        TestCaseOneArg { arg: 0b11111010, expected: 0 },
        TestCaseOneArg { arg: 0b11111011, expected: 0 },
        TestCaseOneArg { arg: 0b11111100, expected: 0 },
        TestCaseOneArg { arg: 0b11111101, expected: 0 },
        TestCaseOneArg { arg: 0b11111110, expected: 0 },
        TestCaseOneArg { arg: 0b11111111, expected: 0 },
    ];

    #[test]
    fn test_i8() {
        for case in test_cases.span() {
            let mut state = RTStateOps::new();
            assert_eq!(__llvm_ctlz_b_c_b(ref state, *case.arg, 0), *case.expected);
        }
    }
}

