use crate::alu::ctlz::ctlz;
use crate::integer::u48::u48;

pub fn __llvm_ctlz_k_c_k(value: u128, _is_zero_poison: u128) -> u128 {
    ctlz::<u48>(value)
}

#[cfg(test)]
mod tests {
    use super::__llvm_ctlz_k_c_k;
    use crate::alu::test_case::TestCaseOneArg;
    #[cairofmt::skip]
    pub const test_cases: [TestCaseOneArg; 60] = [
        // Random bit patterns
        TestCaseOneArg { arg: 0b000001001110001011110110010110010110111011101100, expected: 5 },
        TestCaseOneArg { arg: 0b000001100111110111110101111101100001100100101100, expected: 5 },
        TestCaseOneArg { arg: 0b000110110110000011110110101010101010001100100000, expected: 3 },
        TestCaseOneArg { arg: 0b001000100011101010001011101011100111110010001010, expected: 2 },
        TestCaseOneArg { arg: 0b001001001010100110111101100001110111110010100001, expected: 2 },
        TestCaseOneArg { arg: 0b001001111011101010001001101100001100100010110010, expected: 2 },
        TestCaseOneArg { arg: 0b001011000010100011011101111101111011100110101111, expected: 2 },
        TestCaseOneArg { arg: 0b001011001000101001111100010100101111100101010010, expected: 2 },
        TestCaseOneArg { arg: 0b010000111110010011111000010011001110001001011000, expected: 1 },
        TestCaseOneArg { arg: 0b010001011000100111011000100011111100111010111111, expected: 1 },
        TestCaseOneArg { arg: 0b010001100011101000011011110001010110110101100001, expected: 1 },
        TestCaseOneArg { arg: 0b010010001000111110011011011001101010011000000010, expected: 1 },
        TestCaseOneArg { arg: 0b010010010000100001000110101110000110110100100010, expected: 1 },
        TestCaseOneArg { arg: 0b010011110001111100100011111111011111101000000010, expected: 1 },
        TestCaseOneArg { arg: 0b010011111010100001011010100111110001111110100000, expected: 1 },
        TestCaseOneArg { arg: 0b010101101110011101101101110111010011101000000100, expected: 1 },
        TestCaseOneArg { arg: 0b010101111100000110011110100111110000100011000001, expected: 1 },
        TestCaseOneArg { arg: 0b010101111101010100001110101100111000111110100111, expected: 1 },
        TestCaseOneArg { arg: 0b010111101101010110011110101011101011100001111101, expected: 1 },
        TestCaseOneArg { arg: 0b011001101100100101001100001001101011010001001000, expected: 1 },
        TestCaseOneArg { arg: 0b011011000010001010111101011001100101101001111011, expected: 1 },
        TestCaseOneArg { arg: 0b011011110101000101110000111100001010011000001010, expected: 1 },
        TestCaseOneArg { arg: 0b011011111101011000110100110011000001011001100110, expected: 1 },
        TestCaseOneArg { arg: 0b011111001110000111101111110010110000110110000001, expected: 1 },
        TestCaseOneArg { arg: 0b100000111011001001100101111101110000111111100110, expected: 0 },
        TestCaseOneArg { arg: 0b100001011011011100001111111101101010110111101111, expected: 0 },
        TestCaseOneArg { arg: 0b100001111000111001011111110111100110000011110101, expected: 0 },
        TestCaseOneArg { arg: 0b100010101111110001101001000011000111000111111100, expected: 0 },
        TestCaseOneArg { arg: 0b100101101000010000011110100000011000111001001110, expected: 0 },
        TestCaseOneArg { arg: 0b100101111111111110101100011111101011100000100011, expected: 0 },
        TestCaseOneArg { arg: 0b100110010011100010011101111010101100100100001000, expected: 0 },
        TestCaseOneArg { arg: 0b100110010101101010101011111001111001010010010111, expected: 0 },
        TestCaseOneArg { arg: 0b100110011101100011110000110010000101011011111000, expected: 0 },
        TestCaseOneArg { arg: 0b100111101101011111010110010101001011011000011111, expected: 0 },
        TestCaseOneArg { arg: 0b101000001110100111010001011100100010101000100000, expected: 0 },
        TestCaseOneArg { arg: 0b101000011001010110101011100001000000111100100001, expected: 0 },
        TestCaseOneArg { arg: 0b101000011011101111101101101011000111011111110010, expected: 0 },
        TestCaseOneArg { arg: 0b101001010110011110101101000011110011111010000111, expected: 0 },
        TestCaseOneArg { arg: 0b101001011101110100000101011001110011001100100101, expected: 0 },
        TestCaseOneArg { arg: 0b101001100100011111111111100001100010100010011111, expected: 0 },
        TestCaseOneArg { arg: 0b101001110001000011011000101011011001110011100110, expected: 0 },
        TestCaseOneArg { arg: 0b101010010000000111000011100100101110011000110000, expected: 0 },
        TestCaseOneArg { arg: 0b110000100110101011011001010010010001001001111110, expected: 0 },
        TestCaseOneArg { arg: 0b110010001110001011110101001000010000000111010010, expected: 0 },
        TestCaseOneArg { arg: 0b110010101111100001001101010000001100111111111110, expected: 0 },
        TestCaseOneArg { arg: 0b110010111011110001011110001000111100110111001000, expected: 0 },
        TestCaseOneArg { arg: 0b110100010011000101011011110010100110010000111100, expected: 0 },
        TestCaseOneArg { arg: 0b110100100001001010101110100100001011011110000110, expected: 0 },
        TestCaseOneArg { arg: 0b110101010111111101000111011000001110111101000100, expected: 0 },
        TestCaseOneArg { arg: 0b110101111001000011110101100100000110110101001010, expected: 0 },
        TestCaseOneArg { arg: 0b110111101011010001011100000100010000101011101110, expected: 0 },
        TestCaseOneArg { arg: 0b110111110011110000010100011110000101111010111010, expected: 0 },
        TestCaseOneArg { arg: 0b110111110110100110100111111100010001111000111110, expected: 0 },
        TestCaseOneArg { arg: 0b111000100000101011101001110101111000010010111000, expected: 0 },
        TestCaseOneArg { arg: 0b111001010100101000100000100001000000010100111001, expected: 0 },
        TestCaseOneArg { arg: 0b111010010010001111001110110001111110000011011111, expected: 0 },
        TestCaseOneArg { arg: 0b111010011000000100101100000111101101100000001100, expected: 0 },
        TestCaseOneArg { arg: 0b111010100011001011000011000010101011110010001101, expected: 0 },
        TestCaseOneArg { arg: 0b111110111010111101011110000010110001101111011010, expected: 0 },
        TestCaseOneArg { arg: 0b111111011010111100001101000001001011101010101001, expected: 0 },
    ];

    #[test]
    fn test_i48() {
        for case in test_cases.span() {
            assert_eq!(__llvm_ctlz_k_c_k(*case.arg, 0), *case.expected);
        }
    }
}

