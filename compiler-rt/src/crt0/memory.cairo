//! Memory polyfills
//!
//! This module provides polyfills for memory management (allocation, load, store).
//! Essentially they are wrappers over the public interface of compiler-rt::crt0::allocator.

use crate::crt0::allocator::AllocatorState;

/// Return a global instance of the memory allocator.
///
/// This function is not implemented in crt0. It is generated by Hieratika and linked with
/// memory-related polyfills.
///
/// Since crt0 is written in Cairo and Cairo does not support global mutable objects, crt0 assumes
/// that such allocator object exists, but does not actually create that object. Instead, this
/// getter is declared and used for obtaining the allocator. This way the memory polyfills can use
/// the global mutable allocator instance, despite the language crt0 is written in does not
/// understand such concept. It it up to Hieratika backend to create and provide such instance by
/// implementing this function and linking it with the polyfills.
extern fn get_allocator() -> Box<AllocatorState> nopanic;

pub mod alloc;
pub mod alloca;
pub mod load;
pub mod store;
pub mod cmpxchg;
pub mod atomicrmw;
pub mod getelementptr;
pub mod memcpy;
