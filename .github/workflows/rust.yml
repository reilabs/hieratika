# Metadata for the actions workflow
name: "Rust CI"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

# Environment variables that will be set on all runners
env:
  DEV_SHELL: "nix develop '.#ci'"
  CARGO_TERM_COLOR: always # Always colour Cargo's output.
  CARGO_INCREMENTAL: 0 # Always run without incremental builds on CI.
  CARGO_PROFILE_DEV_DEBUG: 0 # Don't embed debug info even though the build is a dev build.
  RUSTFLAGS: "-D warnings" # Elevate warnings to errors so clippy will fail CI.
  RUSTDOCFLAGS: "-D warnings" # Elevate warnings to errors so clippy will fail CI.

# Configuration for individual jobs
jobs:
  # This job is responsible for running the unit and integration tests
  test:
    name: "Test Rust Code"
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Lix
        shell: "bash"
        run: |
          curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
      - name: Restore Rust Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            target/
          key: rust-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.os }}
      - name: Build Lix Dependencies
        shell: "bash"
        run: |
          eval ${{ env.DEV_SHELL }}
      - name: Build Tests
        shell: "bash"
        run: |
          eval "${{ env.DEV_SHELL }} --command cargo test --all-targets --no-run"
      - name: Run Tests
        shell: "bash"
        run: |
          eval "${{ env.DEV_SHELL }} --command cargo test --all-targets -- --nocapture"

  # This job runs the linter.
  lint:
    name: "Lint Rust Code"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Lix
        shell: bash
        run: |
          curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
      - name: Restore Nix Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/nix_store
          key: nix-${{ hashFiles('**/flake.lock') }}-ubuntu-latest
      - name: Restore Rust Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            target/
          key: rust-${{ hashFiles('**/Cargo.lock') }}-ubuntu-latest
      - name: Build Lix Dependencies
        shell: bash
        run: |
          ${{ env.DEV_SHELL }}
      - name: Lint Code
        shell: bash
        run: |
          ${{ env.DEV_SHELL }} --command cargo clippy --all-targets --all-features

  # This job checks the formatting of the code and other artifacts.
  formatting:
    name: "Check Rust Formatting"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Lix
        shell: bash
        run: |
          curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
      - name: Restore Nix Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/nix_store
          key: nix-${{ hashFiles('**/flake.lock') }}-ubuntu-latest
      - name: Restore Rust Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            target/
          key: rust-${{ hashFiles('**/Cargo.lock') }}-ubuntu-latest
      - name: Build Lix Dependencies
        shell: bash
        run: |
          ${{ env.DEV_SHELL }}
      - name: Check Formatting
        shell: bash
        # Not using `cargo fmt --all` because it includes cairo submodules.
        # Check this issue https://github.com/rust-lang/cargo/issues/13962#issue-2315478020
        # Check this code https://github.com/rust-lang/cargo/issues/13962#issue-2315478020
        run: |
          ${{ env.DEV_SHELL }} --command cargo fmt -- --check

  documentation:
    name: "Check Rust Documentation"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Lix
        shell: bash
        run: |
          curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
      - name: Restore Nix Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/nix_store
          key: nix-${{ hashFiles('**/flake.lock') }}-ubuntu-latest
      - name: Restore Rust Cache
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            target/
          key: rust-${{ hashFiles('**/Cargo.lock') }}-ubuntu-latest
      - name: Build Lix Dependencies
        shell: bash
        run: |
          ${{ env.DEV_SHELL }}
      - name: Check Documentation
        shell: bash
        run: |
          ${{ env.DEV_SHELL }} --command cargo doc --document-private-items
